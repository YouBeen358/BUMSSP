cd = col_num + j - 1 + num_shift
df[rc, cd] = d[j]
}
}
# sprintf("Rows adjusted:")
# print("%d",row_num)
return(df)
}
#| label: use shift_loc() to align columns
#| echo: false
straw_sur2 %<>% shift_loc("more", "PRICE RECEIVED", 2, 1 )
straw_sur2 %<>% shift_loc("more", "ACRES HARVESTED", 1, 1 )
straw_sur2 %<>% shift_loc("more", "ACRES PLANTED", 1, 1 )
straw_sur2 %<>% shift_loc("more", "PRODUCTION", 2, 1 )
straw_sur2 %<>% shift_loc("more", "YIELD", 2, 1 )
straw_sur2 %<>% shift_loc("more", "APPLICATIONS", 3, 1 )
straw_sur2 %<>% shift_loc("more", "TREATED", 3, 1 )
straw_sur2 %<>% drop_one_value_col()
#| label: split domain column into chem, fert, total data frames
#| echo: false
# unique(straw_sur2$Domain)
#    The Domain column (2965 rows) contains data about
#    Chemicals (3359 rows)
#    Fertilizers (115 rows)
#    Production and Yield data ("TOTAL") (491 rows)
#
#    The Chemical data is in categories for
#         Insecticides
#         Fungicides
#         Herbicdes, and
#         Other
#
#    The Domain is split into three dataframes for
#     "Total", "Chemical", and "Fertilizer"
straw_sur2 <- straw_sur2 |>
separate_wider_delim(cols = Domain,
delim = ", ",
names = c("col1",
"col2"),
too_many = "merge",
too_few = "align_start")
# unique(straw_sur2$col1)
survey_d_total <- straw_sur2 |>  filter(col1 == "TOTAL")
survey_d_chem <- straw_sur2 |>  filter(col1 == "CHEMICAL")
survey_d_fert <- straw_sur2 |>  filter(col1 == "FERTILIZER")
#| label: align columns
#| echo: false
survey_d_total %<>% drop_one_value_col()
### align terms
survey_d_total %<>% shift_loc("measure", "MEASURED IN $ / CWT", 1, 1 )
survey_d_total %<>% shift_loc("measure", "MEASURED IN $", 1, 1 )
survey_d_total %<>% shift_loc("measure", "MEASURED IN CWT", 1, 1 )
survey_d_total %<>% shift_loc("measure", "MEASURED IN TONS", 1, 1 )
survey_d_total %<>% shift_loc("measure", "MEASURED IN CWT / ACRE", 1, 1 )
survey_d_total %<>% shift_loc("measure", "MEASURED IN TONS / ACRE", 1, 1 )
#### split the mkt column
survey_d_total <- survey_d_total |>
separate_wider_delim(cols = mkt,
delim = " - ",
names = c("col3",
"col4"),
too_many = "merge",
too_few = "align_start")
#| label: markets
#| echo: false
survey_d_total %<>%
select(-`State ANSI`)
survey_d_total <- survey_d_total |>
group_by(Year) |>
group_by(State) |>
group_by(Period) |>
group_by(col3)
# unique(survey_d_total$col3)
# unique(survey_d_total$col4)
# mv <- survey_d_total |> filter(col3=="PRODUCTION") |> count()
# mv1 <- which(survey_d_total$col3 == "PRODUCTION")
# mv2 <- is.na(survey_d_total$col4[mv1])
# sum(mv2) == length(mv1)
survey_d_total <-  survey_d_total |>
shift_loc(col_name = "col3", dat_name = "PRODUCTION", 2, 1)
# mv1 <- which(survey_d_total$col3 == "PRICE RECEIVED")
# mv2 <- is.na(survey_d_total$col4[mv1])
# sum(mv2) == length(mv1)
survey_d_total <-  survey_d_total |>
shift_loc(col_name = "col3",
dat_name = "PRICE RECEIVED", 2, 1)
survey_d_total <-  survey_d_total |>
rename(market = col3, product_price = col4, summ = measure, measure = other)
## fix ACRES HARVESTED
## the category "HARVESTED" and its measure "acRES" are in reverse
## order
h_index <- which(str_detect(survey_d_total$market, "ACRES HARVESTED") == TRUE)
survey_d_total$product_price[h_index] <- "HARVESTED"
survey_d_total$measure[h_index] <- "acres"
survey_d_total$market[h_index] <- NA
## fix ACRES PLANTED
p_index <- which(str_detect(survey_d_total$market, "ACRES PLANTED") == TRUE)
survey_d_total$product_price[p_index] <- "PLANTED"
survey_d_total$measure[p_index] <- "Acres"
survey_d_total$market[p_index] <- NA
## fixed up measure column
survey_d_total$measure <- str_replace(survey_d_total$measure, "MEASURED IN ", "")
## Other table fix-ups
## move Yield
y_index <- which(str_detect(survey_d_total$market, "YIELD") == TRUE)
survey_d_total$product_price[y_index] <- "YIELD"
survey_d_total$market[y_index] <- NA
ns_index <- which(str_detect(survey_d_total$market, "NOT SOLD") == TRUE)
survey_d_total$product_price[ns_index] <- "NOT SOLD"
survey_d_total$market[ns_index] <- NA
u_index <- which(str_detect(survey_d_total$market, "UTILIZED") == TRUE)
survey_d_total$product_price[u_index] <- "UTILIZED"
survey_d_total$market[u_index] <- NA
rm(ns_index, p_index, u_index, y_index, h_index, straw_sur2)
#| label: make state-wise DFs
#| echo: false
# unique(survey_d_total$State)
# [1] "US TOTAL"       "CALIFORNIA"
# [3] "FLORIDA"        "OTHER STATES"
# [5] "NEW YORK"       "NORTH CAROLINA"
# [7] "OREGON"         "WASHINGTON"
sur_tot_ca <- survey_d_total |>
filter(State == "CALIFORNIA")
sur_tot_fl <- survey_d_total |>
filter(State == "FLORIDA")
sur_tot_ny <- survey_d_total |>
filter(State == "NEW YORK")
sur_tot_or <- survey_d_total |>
filter(State == "OREGON")
sur_tot_nc <- survey_d_total |>
filter(State == "NORTH CAROLINA")
sur_tot_wa <- survey_d_total |>
filter(State == "WASHINGTON")
sur_tot_other <- survey_d_total |>
filter(State == "OTHER STATES")
sur_tot_US <- survey_d_total |>
filter(State == "US TOTAL")
#| label: FL CA by year
#| echo: false
sur_CA_23 <- sur_tot_ca |> filter(Year == "2023") |>
select(market, product_price, summ, measure, Value) |>
filter(Value != "(D)")
sur_fl_23 <- sur_tot_fl |> filter(Year == "2023") |>
select(market, product_price, summ, measure, Value) |>
filter(Value != "(D)")
sur_CA_22 <- sur_tot_ca |> filter(Year == "2022") |>
select(market, product_price, summ, measure, Value) |>
filter(Value != "(D)")
sur_fl_22 <- sur_tot_fl |> filter(Year == "2022") |>
select(market, product_price, summ, measure, Value) |>
filter(Value != "(D)")
sur_CA_21 <- sur_tot_ca |> filter(Year == "2021") |>
select(market, product_price, summ, measure, Value) |>
filter(Value != "(D)")
sur_fl_21 <- sur_tot_fl |> filter(Year == "2021") |>
select(market, product_price, summ, measure, Value) |>
filter(Value != "(D)")
sur_CA_20 <- sur_tot_ca |> filter(Year == "2020") |>
select(market, product_price, summ, measure, Value) |>
filter(Value != "(D)")
sur_fl_20 <- sur_tot_fl |> filter(Year == "2020") |>
select(market, product_price, summ, measure, Value) |>
filter(Value != "(D)")
sur_CA_19 <- sur_tot_ca |> filter(Year == "2019") |>
select(market, product_price, summ, measure, Value) |>
filter(Value != "(D)")
sur_fl_19 <- sur_tot_fl |> filter(Year == "2019") |>
select(market, product_price, summ, measure, Value) |>
filter(Value != "(D)")
# sur_CA_18 <- sur_tot_ca |> filter(Year == "2018") |>
#   select(market, product_price, summ, measure, Value) |>
#    filter(Value != "(D)")
#
#
# sur_fl_18 <- sur_tot_fl |> filter(Year == "2018") |>
#   select(market, product_price, summ, measure, Value) |>
#    filter(Value != "(D)")
sur_fl_19 <- sur_fl_19 |> drop_one_value_col()
sur_fl_20 <- sur_fl_20 |> drop_one_value_col()
sur_fl_21 <- sur_fl_21 |> drop_one_value_col()
sur_fl_22 <- sur_fl_22 |> drop_one_value_col()
sur_fl_23 <- sur_fl_23 |> drop_one_value_col()
sur_CA_23 <- sur_CA_23 |> drop_one_value_col()
sur_CA_22 <- sur_CA_22 |> drop_one_value_col()
sur_CA_21 <- sur_CA_21 |> drop_one_value_col()
sur_CA_20 <- sur_CA_20 |> drop_one_value_col()
sur_CA_19 <- sur_CA_19 |> drop_one_value_col()
sur_CA_19 <- sur_CA_19 |> rename(value_19 = Value)
sur_CA_20 <- sur_CA_20 |> rename(value_20 = Value)
sur_CA_21 <- sur_CA_21 |> rename(value_21 = Value)
sur_CA_22 <- sur_CA_22 |> rename(value_22 = Value)
sur_CA_23 <- sur_CA_23 |> rename(value_23 = Value)
sur_CA_19_23 <- cbind(sur_CA_19,sur_CA_20[,3],sur_CA_21[,3],sur_CA_22[,3],sur_CA_23[,3])
sur_fl_19 <- sur_fl_19 |> rename(value_19 = Value)
sur_fl_20 <- sur_fl_20 |> rename(value_20 = Value)
sur_fl_21 <- sur_fl_21 |> rename(value_21 = Value)
sur_fl_22 <- sur_fl_22 |> rename(value_22 = Value)
sur_fl_23 <- sur_fl_23 |> rename(value_23 = Value)
sur_fl_19_23 <- cbind(sur_fl_19,sur_fl_20[,3],sur_fl_21[,3],sur_fl_22[,3],sur_fl_23[,3])
#| label: survey_totals tables
#| echo: false
library(knitr)
library(kableExtra)
fl_19_23 <- as.data.frame(sur_fl_19_23)
colnames(fl_19_23) <- c("Measure", "Units", "2019", "2020", "2021", "2022", "2023")
fl_19_23$Measure <- c("Price", "Havested", "Planted", "Production", "Production", "Yield", "Not Sold", "Utilized")
fl_19_23 <- fl_19_23 |> select(-Units)
Units <- c("$-cwt", "ac", "ac", "$", "cwt", "cwt-ac", "cwt", "cwt")
fl_19_23 <- fl_19_23 |> mutate(Units, .after=Measure)
#fl |> kable()
#| label: chemicals
#| echo: false
survey_d_chem <- survey_d_chem |> drop_one_value_col()
survey_d_chem <- survey_d_chem |> select(-`State ANSI`)
## California Chemicals
# ca_chem <- survey_d_chem |> filter(State=="CALIFORNIA") |>
#   select()
survey_d_chem <- survey_d_chem |>
separate_wider_delim(cols = mkt,
delim = " - ",
names = c("mk1",
"mk2"),
too_many = "merge",
too_few = "align_start")
survey_d_chem$measure <- str_replace(survey_d_chem$measure, "MEASURED IN ", "")
# unique(survey_d_chem$`Domain Category`)
survey_d_chem$`Domain Category` <- str_replace(survey_d_chem$`Domain Category`, "CHEMICAL, ", "")
survey_d_chem <- survey_d_chem |> rename(chem = `Domain Category`)
survey_d_chem <- survey_d_chem |>
separate_wider_delim(cols = chem,
delim = ": ",
names = c("type",
"chem_type"),
too_many = "merge",
too_few = "align_start")
# s1 <- survey_d_chem$col2 == survey_d_chem$type
# sum(s1)
survey_d_chem <- survey_d_chem |> select(-col2)
survey_d_chem <- survey_d_chem |>
rename(chem_name = chem_type)
survey_d_chem$chem_name <- str_replace(survey_d_chem$chem_name, "^\\(", "")
survey_d_chem$chem_name <- str_replace(survey_d_chem$chem_name, "\\)$", "")
survey_d_chem <- survey_d_chem |>
separate_wider_delim(cols = chem_name,
delim = " = ",
names = c("chem_name",
"chem_index"),
too_many = "error",
too_few = "align_start")
chemicals_Used_cA <- survey_d_chem |>
filter(State == "CALIFORNIA") |>
select(type, chem_name, chem_index)
cA_chem_fung <- chemicals_Used_cA |>
filter(type == "FUNGICIDE") |>
distinct()
cA_chem_herb <- chemicals_Used_cA |>
filter(type == "HERBICIDE") |>
distinct()
cA_chem_insect <- chemicals_Used_cA |>
filter(type == "INSECTICIDE") |>
distinct()
cA_chem_other <- chemicals_Used_cA |>
filter(type == "OTHER") |>
distinct()
#| label: fertilizer
#| echo: false
survey_d_fert <- survey_d_fert |> drop_one_value_col()
survey_d_fert <- survey_d_fert |> select(-`State ANSI`)
survey_d_fert <- survey_d_fert |>
separate_wider_delim(cols = mkt,
delim = " - ",
names = c("mk1",
"mk2"),
too_many = "merge",
too_few = "align_start")
survey_d_fert$measure <- str_replace(survey_d_fert$measure, "MEASURED IN ", "")
# unique(survey_d_chem$`Domain Category`)
survey_d_fert$`Domain Category` <- str_replace(survey_d_fert$`Domain Category`, "CHEMICAL, ", "")
survey_d_fert <- survey_d_fert |> rename(chem = `Domain Category`)
survey_d_fert <- survey_d_fert |>
separate_wider_delim(cols = chem,
delim = ": ",
names = c("type",
"chem_type"),
too_many = "merge",
too_few = "align_start")
survey_d_fert <- survey_d_fert |>
rename(chem_name = chem_type)
survey_d_fert$chem_name <- str_replace(survey_d_fert$chem_name, "^\\(", "")
survey_d_fert$chem_name <- str_replace(survey_d_fert$chem_name, "\\)$", "")
survey_d_fert <- survey_d_fert |> drop_one_value_col()
#| label: final filters 1
#| echo: false
survey_d_total_ca <- survey_d_total |>
filter(State == "CALIFORNIA")
ca_tab <- survey_d_total_ca |> group_by(Year, Period
)
ca_tab_22 <- survey_d_total_ca |> filter(Year == 2022)
ca_tab_22 <- ca_tab_22 |> drop_one_value_col()
ca_tab_22 <- ca_tab_22 |>
filter(Period == "YEAR")
ca_tab_22 <- ca_tab_22 |>
filter(Value != "(D)")
ca_tab_22 <- ca_tab_22 |> drop_one_value_col()
#| label: isolate organic
#| echo: false
#
# unique(straw_cen$strawberries)
# straw_cen$strawberries |> str_which("STRAWBERRIES") |> length()
# straw_cen$strawberries |> str_which("STRAWBERRIES, ORGANIC") |> length()
# straw_cen$strawberries |> str_which("STRAWBERRIES, ORGANIC, FRESH MARKET") |> length()
# straw_cen$strawberries |> str_which("STRAWBERRIES, ORGANIC, PROCESSING" ) |> length()
#
# ## count the cases
# straw_cen$strawberries |> str_which("ORGANIC") |> length()
# straw_cen$strawberries |> str_which("FRESH MARKET") |> length()
# straw_cen$strawberries |> str_which("PROCESSING") |> length()
straw_cen <- straw_cen |>
separate_wider_delim(  cols = strawberries,
delim = ", ",
names = c("strawberries",
"ORGANIC",
"organic_detail"),
too_many = "error",
too_few = "align_start"
)
#| label: load libraries and set options
#| warning: false
#| message: false
#| echo: false
library(knitr)
library(kableExtra)
library(tidyverse)
library(magrittr)
#| label: read data - glimpse
#| echo: false
strawberry <- read_csv("strawberries25_v3.csv", col_names = TRUE, show_col_types = FALSE )
#| label: isolate organic
#| echo: false
#
# unique(straw_cen$strawberries)
# straw_cen$strawberries |> str_which("STRAWBERRIES") |> length()
# straw_cen$strawberries |> str_which("STRAWBERRIES, ORGANIC") |> length()
# straw_cen$strawberries |> str_which("STRAWBERRIES, ORGANIC, FRESH MARKET") |> length()
# straw_cen$strawberries |> str_which("STRAWBERRIES, ORGANIC, PROCESSING" ) |> length()
#
# ## count the cases
# straw_cen$strawberries |> str_which("ORGANIC") |> length()
# straw_cen$strawberries |> str_which("FRESH MARKET") |> length()
# straw_cen$strawberries |> str_which("PROCESSING") |> length()
straw_cen <- straw_cen |>
separate_wider_delim(  cols = strawberries,
delim = ", ",
names = c("strawberries",
"ORGANIC",
"organic_detail"),
too_many = "error",
too_few = "align_start"
)
#| label: read data - glimpse
#| echo: false
strawberry <- read_csv("strawberries25_v3.csv", col_names = TRUE, show_col_types = FALSE )
setwd("~/Desktop/MA615/BUMSSP/MA615/Strawberry2")
#| label: read data - glimpse
#| echo: false
strawberry <- read_csv("strawberries25_v3.csv", col_names = TRUE, show_col_types = FALSE )
setwd("~/Desktop/MA615/BUMSSP/MA615/Strawberry2")
#| label: read data - glimpse
#| echo: false
strawberry <- read_csv("strawberries25_v.csv", col_names = TRUE, show_col_types = FALSE )
setwd("~/Desktop/MA615/BUMSSP/MA615")
setwd("~/Desktop/MA615/BUMSSP/MA615/Strawberry2")
#| label: read data - glimpse
#| echo: false
strawberry <- read_csv("strawberries25_v.csv", col_names = TRUE, show_col_types = FALSE )
#| label: load libraries and set options
#| warning: false
#| message: false
#| echo: false
library(knitr)
library(kableExtra)
library(tidyverse)
library(magrittr)
#| label: read data - glimpse
#| echo: false
strawberry <- read_csv("strawberries25_v.csv", col_names = TRUE, show_col_types = FALSE )
getwd()
setwd("~/Desktop/MA615/BUMSSP/MA615/Strawberry2")
setwd("~/Desktop/MA615/BUMSSP/MA615/Strawberry2")
knitr::opts_chunk$set(echo = TRUE)
#| label: load libraries and set options
#| warning: false
#| message: false
#| echo: false
library(knitr)
library(kableExtra)
library(tidyverse)
library(magrittr)
#| label: read data - glimpse
#| echo: false
strawberry <- read_csv("strawberries25_v3.csv", col_names = TRUE, show_col_types = FALSE )
#| label: read data - glimpse
#| echo: false
strawberry <- read_csv("strawberries25_v.csv", col_names = TRUE, show_col_types = FALSE )
## glimpse(strawberry)
#| label: ditch the counties
#| echo: false
# unique(strawberry$`Geo Level`)
strawberry <- strawberry |>
filter(`Geo Level`== "NATIONAL" | `Geo Level`== "STATE")
#| label: function def - drop 1-item columns
#| echo: false
drop_one_value_col <- function(df, prt_val = FALSE){
# browser()
df_id <- ensym(df)
if(prt_val){
msg = paste("Looking for single value columns in data frame: ",as.character(df_id) )
print(msg)}
## takes whole dataframe
dropc <- NULL
val <- NULL
## test each column for a single value
for(i in 1:dim(df)[2]){
if(dim(distinct(df[,i]))[1] == 1){
dropc <- c(dropc, i)
val <- c(val, df[1,i])
}
}
if(prt_val){
if(is.null(dropc)){
print("No columns dropped")
return(df)}else{
print("Columns dropped:")
# print(colnames(df)[drop])
print(unlist(val))
df <- df[, -1*dropc]
return(df)
}
}
df <- df[, -1*dropc]
return(df)
}
## use the function
strawberry <- strawberry |> drop_one_value_col(prt_val = FALSE)
#| label: srawberries split census, survey
#| echo: false
straw_cen <- strawberry |> filter(Program=="CENSUS")
straw_sur <- strawberry |> filter(Program=="SURVEY")
straw_cen <- straw_cen |> drop_one_value_col()
straw_sur <- straw_sur |> drop_one_value_col()
rm(strawberry)
#| label: straw_cen split cols
#| echo: false
straw_cen <- straw_cen |>
separate_wider_delim(  cols = `Data Item`,
delim = " - ",
names = c("strawberries",
"Category"),
too_many = "error",
too_few = "align_start"
)
#| label: isolate organic
#| echo: false
#
# unique(straw_cen$strawberries)
# straw_cen$strawberries |> str_which("STRAWBERRIES") |> length()
# straw_cen$strawberries |> str_which("STRAWBERRIES, ORGANIC") |> length()
# straw_cen$strawberries |> str_which("STRAWBERRIES, ORGANIC, FRESH MARKET") |> length()
# straw_cen$strawberries |> str_which("STRAWBERRIES, ORGANIC, PROCESSING" ) |> length()
#
# ## count the cases
# straw_cen$strawberries |> str_which("ORGANIC") |> length()
# straw_cen$strawberries |> str_which("FRESH MARKET") |> length()
# straw_cen$strawberries |> str_which("PROCESSING") |> length()
straw_cen <- straw_cen |>
separate_wider_delim(  cols = strawberries,
delim = ", ",
names = c("strawberries",
"ORGANIC",
"organic_detail"),
too_many = "error",
too_few = "align_start"
)
straw_cen <- straw_cen |> drop_one_value_col()
## how many organic rows?
organic_cen <- straw_cen |> filter(ORGANIC == "ORGANIC")
## sum(is.na(straw_cen$ORGANIC))
straw_cen <- straw_cen[(is.na(straw_cen$ORGANIC)),]
straw_cen <- straw_cen |> drop_one_value_col()
#| label: explore straw_cen$Category
#| echo: false
straw_cen <- straw_cen |>
separate_wider_delim(  cols = `Category`,
delim = " ",
names = c("COL1",
"COL2"),
too_many = "merge",
too_few = "align_start"
)
straw_cen$COL2 <- str_replace(straw_cen$COL2, "WITH ", "")
straw_cen <- straw_cen |> rename(Measure = COL1, Bearing_type= COL2)
#| label: explore straw_cen$Domain & Domain Category
#| echo: false
## remove AREA GROWN and parens
## change NOT SPECIFIEC TO TOTAL
straw_cen <- straw_cen |> rename(size_bracket = `Domain Category`)
straw_cen$size_bracket <- str_replace(straw_cen$size_bracket, "NOT SPECIFIED", "TOTAL")
straw_cen$size_bracket <- str_replace(straw_cen$size_bracket, "AREA GROWN: ", "")
#| label: explore organic_cen
#| echo: false
organic_cen <- organic_cen |> drop_one_value_col()
View(organic_cen)
