library(shiny)
ui <- fluidPage(
titlePanel("Testing textOutput vs verbatimTextOutput"),
fluidRow(
column(6,
h3("Using renderPrint with verbatimTextOutput"),
verbatimTextOutput("print_summary"),
verbatimTextOutput("print_ttest")
),
column(6,
h3("Using renderText with textOutput"),
textOutput("text_greeting"),
textOutput("text_model")
)
)
)
server <- function(input, output, session) {
output$print_summary <- renderPrint({
summary(mtcars)
})
output$print_ttest <- renderPrint({
t.test(1:5, 2:6)
})
output$text_greeting <- renderText({
"Good morning!"
})
output$text_model <- renderText({
str(lm(mpg ~ wt, data = mtcars))
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
titlePanel("Testing Output Types and Scatterplot"),
fluidRow(
column(6,
h3("Using renderPrint with verbatimTextOutput"),
verbatimTextOutput("print_summary"),
verbatimTextOutput("print_ttest")
),
column(6,
h3("Using renderText with textOutput"),
textOutput("text_greeting"),
textOutput("text_model")
)
),
fluidRow(
column(12,
h3("Scatterplot with Custom Size and Accessibility"),
plotOutput("scatterplot",
width = "700px",  # Custom width
height = "300px", # Custom height
alt = "A scatterplot of five random numbers.") # Accessibility alt text
)
)
)
server <- function(input, output, session) {
# Text and Print Outputs
output$print_summary <- renderPrint({
summary(mtcars)
})
output$print_ttest <- renderPrint({
t.test(1:5, 2:6)
})
output$text_greeting <- renderText({
"Good morning!"
})
output$text_model <- renderText({
str(lm(mpg ~ wt, data = mtcars))
})
# Scatterplot Output
output$scatterplot <- renderPlot({
x <- 1:5
y <- runif(5)  # Generate random values for scatterplot
plot(x, y,
main = "Scatterplot of Five Random Numbers",
xlab = "Index",
ylab = "Random Value",
pch = 19, col = "blue")
}, res = 96)  # Match RStudio's resolution
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
titlePanel("Testing Output Types and Scatterplot"),
fluidRow(
column(6,
h3("Using renderPrint with verbatimTextOutput"),
verbatimTextOutput("print_summary"),
verbatimTextOutput("print_ttest")
),
column(6,
h3("Using renderText with textOutput"),
textOutput("text_greeting"),
textOutput("text_model")
)
),
fluidRow(
column(12,
h3("Scatterplot with Custom Size and Accessibility"),
plotOutput("scatterplot",
width = "700px",  # Custom width
height = "300px", # Custom height
alt = "A scatterplot of five random numbers.") # Accessibility alt text
)
)
)
library(shiny)
ui <- fluidPage(
titlePanel("Testing Output Types and Scatterplot"),
fluidRow(
column(6,
h3("Using renderPrint with verbatimTextOutput"),
verbatimTextOutput("print_summary"),
verbatimTextOutput("print_ttest")
),
column(6,
h3("Using renderText with textOutput"),
textOutput("text_greeting"),
textOutput("text_model")
)
),
fluidRow(
column(12,
h3("Scatterplot with Custom Size and Accessibility"),
div(
plotOutput("scatterplot",
width = "700px",
height = "300px"),
tags$p("A scatterplot of five random numbers.", class = "sr-only")
)
)
)
)
server <- function(input, output, session) {
# Text and Print Outputs
output$print_summary <- renderPrint({
summary(mtcars)
})
output$print_ttest <- renderPrint({
t.test(1:5, 2:6)
})
output$text_greeting <- renderText({
"Good morning!"
})
output$text_model <- renderText({
str(lm(mpg ~ wt, data = mtcars))
})
# Scatterplot Output
output$scatterplot <- renderPlot({
x <- 1:5
y <- runif(5)  # Generate random values for scatterplot
plot(x, y,
main = "Scatterplot of Five Random Numbers",
xlab = "Index",
ylab = "Random Value",
pch = 19, col = "blue")
}, res = 96)  # Match RStudio's resolution
}
shinyApp(ui, server)
library(shiny)
library(DT)  # Use DT for DataTables
library(shiny)
library(DT)  # Use DT for modern DataTables
ui <- fluidPage(
titlePanel("Testing Output Types, Scatterplot, and Data Table"),
fluidRow(
column(6,
h3("Using renderPrint with verbatimTextOutput"),
verbatimTextOutput("print_summary"),
verbatimTextOutput("print_ttest")
),
column(6,
h3("Using renderText with textOutput"),
textOutput("text_greeting"),
textOutput("text_model")
)
),
fluidRow(
column(12,
h3("Scatterplot with Custom Size and Accessibility"),
div(
plotOutput("scatterplot",
width = "700px",
height = "300px"),
tags$p("A scatterplot of five random numbers.", class = "sr-only")
)
)
),
fluidRow(
column(12,
h3("Data Table with Suppressed Controls"),
DTOutput("table")  # Use DTOutput for the data table
)
)
)
server <- function(input, output, session) {
# Text and Print Outputs
output$print_summary <- renderPrint({
summary(mtcars)
})
output$print_ttest <- renderPrint({
t.test(1:5, 2:6)
})
output$text_greeting <- renderText({
"Good morning!"
})
output$text_model <- renderText({
str(lm(mpg ~ wt, data = mtcars))
})
# Scatterplot Output
output$scatterplot <- renderPlot({
x <- 1:5
y <- runif(5)  # Generate random values for scatterplot
plot(x, y,
main = "Scatterplot of Five Random Numbers",
xlab = "Index",
ylab = "Random Value",
pch = 19, col = "blue")
}, res = 96)  # Match RStudio's resolution
# Data Table Output
output$table <- renderDT({
datatable(mtcars,
options = list(
searching = FALSE,   # Disable search box
ordering = FALSE,    # Disable column sorting
info = FALSE,        # Disable summary information
lengthChange = FALSE, # Disable length selection
paging = FALSE       # Disable pagination
))
})
}
shinyApp(ui, server)
# Example with server1
library(shiny)
ui <- fluidPage(
textInput("name", "What's your name?"),
textOutput("greeting")
)
server1 <- function(input, output) {
output$greeting <- renderText({
paste0("Hello ", input$name)
})
}
shinyApp(ui, server1)
# Example with server2
server2 <- function(input, output) {
output$greeting <- renderText({
paste0("Hello ", input$name)
})
}
shinyApp(ui, server2)
# Example with server1
library(shiny)
ui <- fluidPage(
textInput("name", "What's your name?"),
textOutput("greeting")
)
server1 <- function(input, output) {
output$greeting <- renderText({
paste0("Hello ", input$name)
})
}
shinyApp(ui, server1)
server2 <- function(input, output) {
greeting <- reactive({
paste0("Hello ", input$name)
})
output$greeting <- renderText({
greeting()
})
}
shinyApp(ui, server2)
server3 <- function(input, output) {
output$greeting <- renderText({
paste0("Hello ", input$name)
})
}
shinyApp(ui, server3)
# Install the package if not already installed
install.packages("jpeg")
# Load the library
library(jpeg)
# Read and display the image
img <- readJPEG("IMG_0247.jpg")
setwd("~/Desktop/MA615/BUMSSP/MA615/Shiny")
# Read and display the image
img <- readJPEG("IMG_0247.jpg")
plot(1:2, type = "n", xlab = "", ylab = "", axes = FALSE)
rasterImage(img, 1, 1, 2, 2)
# Load the library
library(jpeg)
# Read and display the image
img <- readJPEG("IMG_0248.jpg")
plot(1:2, type = "n", xlab = "", ylab = "", axes = FALSE)
rasterImage(img, 1, 1, 2, 2)
#Q3
library(shiny)
library(vroom)
library(tidyverse)
injuries <- vroom::vroom("neiss/injuries.tsv.gz")
products <- vroom::vroom("neiss/products.tsv")
population <- vroom::vroom("neiss/population.tsv")
#Q3
dir.create("neiss")
#> Warning in dir.create("neiss"): 'neiss' already exists
download <- function(name) {
url <- "https://raw.github.com/hadley/mastering-shiny/main/neiss/"
download.file(paste0(url, name), paste0("neiss/", name), quiet = TRUE)
}
download("injuries.tsv.gz")
download("population.tsv")
download("products.tsv")
library(shiny)
library(vroom)
library(tidyverse)
injuries <- vroom::vroom("neiss/injuries.tsv.gz")
products <- vroom::vroom("neiss/products.tsv")
population <- vroom::vroom("neiss/population.tsv")
count_top <- function(df, var, n) {
df %>%
mutate({{ var }} := fct_lump(fct_infreq({{ var }}), n = n)) %>%
group_by({{ var }}) %>%
summarise(n = as.integer(sum(weight)))
}
ui <- fluidPage(
fluidRow(
column(6,
selectInput("code", "Product",
choices = setNames(products$prod_code, products$title))
),
column(3,
numericInput("rows", "Number of rows to show:", value = 5, min = 1, max = 20)
)
),
fluidRow(
column(4, tableOutput("diag")),
column(4, tableOutput("body_part")),
column(4, tableOutput("location"))
),
fluidRow(
column(12, plotOutput("age_sex"))
)
)
server <- function(input, output, session) {
# Reactive dataset filtered by product code
selected <- reactive(injuries %>% filter(prod_code == input$code))
# Summary tables
output$diag <- renderTable(
count_top(selected(), diag, input$rows), width = "100%"
)
output$body_part <- renderTable(
count_top(selected(), body_part, input$rows), width = "100%"
)
output$location <- renderTable(
count_top(selected(), location, input$rows), width = "100%"
)
summary <- reactive({
selected() %>%
count(age, sex, wt = weight) %>%
left_join(population, by = c("age", "sex")) %>%
mutate(rate = n / population * 1e4)
})
output$age_sex <- renderPlot({
summary() %>%
ggplot(aes(age, n, colour = sex)) +
geom_line() +
labs(y = "Estimated number of injuries")
}, res = 96)
}
shinyApp(ui, server)
# Function to get top n rows
count_top <- function(df, var, n) {
df %>%
mutate({{ var }} := fct_lump(fct_infreq({{ var }}), n = n)) %>%
group_by({{ var }}) %>%
summarise(n = as.integer(sum(weight)))
}
# UI
ui <- fluidPage(
fluidRow(
column(6,
selectInput("code", "Product",
choices = setNames(products$prod_code, products$title))
),
column(3,
numericInput("rows", "Number of rows to show:", value = 5, min = 1, max = 20)
)
),
fluidRow(
column(4, tableOutput("diag")),
column(4, tableOutput("body_part")),
column(4, tableOutput("location"))
),
fluidRow(
column(12, plotOutput("age_sex"))
),
fluidRow(
column(2, actionButton("prev", "Previous")),
column(2, actionButton("next", "Next")),
column(8, textOutput("narrative"))
)
)
# Server
server <- function(input, output, session) {
# Reactive dataset filtered by product code
selected <- reactive(injuries %>% filter(prod_code == input$code))
# Summary tables
output$diag <- renderTable(
count_top(selected(), diag, input$rows), width = "100%"
)
output$body_part <- renderTable(
count_top(selected(), body_part, input$rows), width = "100%"
)
output$location <- renderTable(
count_top(selected(), location, input$rows), width = "100%"
)
# Summary for plotting
summary <- reactive({
selected() %>%
count(age, sex, wt = weight) %>%
left_join(population, by = c("age", "sex")) %>%
mutate(rate = n / population * 1e4)
})
# Plot
output$age_sex <- renderPlot({
summary() %>%
ggplot(aes(age, n, colour = sex)) +
geom_line() +
labs(y = "Estimated number of injuries")
}, res = 96)
# Reactive value for the current narrative index
current_index <- reactiveVal(1)
# Update index when buttons are clicked
observeEvent(input$next, {
# Run the app
shinyApp(ui, server)
#Advanced
# Function to get top n rows
count_top <- function(df, var, n) {
df %>%
mutate({{ var }} := fct_lump(fct_infreq({{ var }}), n = n)) %>%
group_by({{ var }}) %>%
summarise(n = as.integer(sum(weight)))
}
# UI
ui <- fluidPage(
fluidRow(
column(6,
selectInput("code", "Product",
choices = setNames(products$prod_code, products$title))
),
column(3,
numericInput("rows", "Number of rows to show:", value = 5, min = 1, max = 20)
)
),
fluidRow(
column(4, tableOutput("diag")),
column(4, tableOutput("body_part")),
column(4, tableOutput("location"))
),
fluidRow(
column(12, plotOutput("age_sex"))
),
fluidRow(
column(2, actionButton("prev", "Previous")),
column(2, actionButton("next", "Next")),
column(8, textOutput("narrative"))
)
)
# Server
server <- function(input, output, session) {
# Reactive dataset filtered by product code
selected <- reactive(injuries %>% filter(prod_code == input$code))
# Summary tables
output$diag <- renderTable(
count_top(selected(), diag, input$rows), width = "100%"
)
output$body_part <- renderTable(
count_top(selected(), body_part, input$rows), width = "100%"
)
output$location <- renderTable(
count_top(selected(), location, input$rows), width = "100%"
)
# Summary for plotting
summary <- reactive({
selected() %>%
count(age, sex, wt = weight) %>%
left_join(population, by = c("age", "sex")) %>%
mutate(rate = n / population * 1e4)
})
# Plot
output$age_sex <- renderPlot({
summary() %>%
ggplot(aes(age, n, colour = sex)) +
geom_line() +
labs(y = "Estimated number of injuries")
}, res = 96)
# Reactive value for the current narrative index
current_index <- reactiveVal(1)
# Update index when buttons are clicked
observeEvent(input$next, {
# Run the app
shinyApp(ui, server)
