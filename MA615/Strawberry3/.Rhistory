strawberry_clean <- strawberry_clean %>%
group_by(Use) %>%
mutate(Value = ifelse(is.na(Value), mean(Value, na.rm = TRUE), Value)) %>%
ungroup()
# Further refine imputation by filling based on Use-State combination
strawberry_clean <- strawberry_clean %>%
group_by(Use, State) %>%
mutate(Value = ifelse(is.na(Value), mean(Value, na.rm = TRUE), Value)) %>%
ungroup()
# Step 3: Verify Imputation
# Final summary of 'Value' column and count of remaining NAs
final_na_count <- sum(is.na(strawberry_clean$Value))
cat("Final NA count in 'Value':", final_na_count, "\n")
summary(strawberry_clean$Value)
# Load necessary libraries
library(dplyr)
library(stringr)
# Step 1: Replace Placeholders and Empty Strings in All Columns
strawberry_clean <- strawberry_clean %>%
mutate(across(everything(), ~ na_if(.x, ""))) %>%
mutate(across(everything(), ~ na_if(.x, "(D)"))) %>%
mutate(across(everything(), ~ na_if(.x, "(NA)"))) %>%
mutate(across(everything(), ~ na_if(.x, "(L)")))
# Load necessary libraries
library(dplyr)
library(stringr)
# Step 1: Replace Placeholders and Empty Strings Only in Character Columns
strawberry_clean <- strawberry_clean %>%
mutate(across(where(is.character), ~ na_if(.x, ""))) %>%       # Convert "" to NA in character columns
mutate(across(where(is.character), ~ na_if(.x, "(D)"))) %>%    # Convert "(D)" to NA in character columns
mutate(across(where(is.character), ~ na_if(.x, "(NA)"))) %>%   # Convert "(NA)" to NA in character columns
mutate(across(where(is.character), ~ na_if(.x, "(L)")))        # Convert "(L)" to NA in character columns
# Step 2: Check Initial Missing Values in All Columns
initial_na_counts <- colSums(is.na(strawberry_clean))
cat("Initial NA counts per column:\n")
print(initial_na_counts)
# Step 3: Missing Value Imputation
# Impute for numeric columns: First by `Use` group, then refine by `Use` and `State`
strawberry_clean <- strawberry_clean %>%
group_by(Use) %>%
mutate(across(where(is.numeric), ~ ifelse(is.na(.), mean(., na.rm = TRUE), .))) %>%
ungroup() %>%
group_by(Use, State) %>%
mutate(across(where(is.numeric), ~ ifelse(is.na(.), mean(., na.rm = TRUE), .))) %>%
ungroup()
# Impute for categorical columns with "Unknown"
strawberry_clean <- strawberry_clean %>%
mutate(across(where(is.character), ~ ifelse(is.na(.), "Unknown", .)))
# Step 4: Verify Imputation
# Check final NA counts in all columns
final_na_counts <- colSums(is.na(strawberry_clean))
cat("Final NA counts per column:\n")
print(final_na_counts)
# Summary of dataset after imputation
summary(strawberry_clean)
# Load necessary libraries
library(dplyr)
library(stringr)
# Step 1: Replace Placeholders and Empty Strings in Character Columns
strawberry_clean <- strawberry_clean %>%
mutate(across(where(is.character), ~ na_if(.x, ""))) %>%
mutate(across(where(is.character), ~ na_if(.x, "(D)"))) %>%
mutate(across(where(is.character), ~ na_if(.x, "(NA)"))) %>%
mutate(across(where(is.character), ~ na_if(.x, "(L)")))
# Step 2: Check Initial NA Counts in All Columns
initial_na_counts <- colSums(is.na(strawberry_clean))
cat("Initial NA counts per column:\n")
print(initial_na_counts)
# Step 3: Imputation for All Columns
# Impute numeric columns using mean or median, grouped by `Use` and `State`
strawberry_clean <- strawberry_clean %>%
group_by(Use) %>%
mutate(across(where(is.numeric), ~ ifelse(is.na(.), mean(., na.rm = TRUE), .))) %>%
ungroup() %>%
group_by(Use, State) %>%
mutate(across(where(is.numeric), ~ ifelse(is.na(.), mean(., na.rm = TRUE), .))) %>%
ungroup()
# Impute character columns with "Unknown" if NA
strawberry_clean <- strawberry_clean %>%
mutate(across(where(is.character), ~ ifelse(is.na(.), "Unknown", .)))
# Handle logical columns with default values or remove unnecessary ones
# Fill logical NA with FALSE where needed or drop these columns if appropriate
strawberry_clean <- strawberry_clean %>%
mutate(across(where(is.logical), ~ ifelse(is.na(.), FALSE, .)))
# Step 4: Final NA Check
final_na_counts <- colSums(is.na(strawberry_clean))
cat("Final NA counts per column:\n")
print(final_na_counts)
# Final Summary
summary(strawberry_clean)
# Load necessary libraries
library(dplyr)
library(ggplot2)
library(readr)
library(stringr)
# Load the cleaned dataset
strawberry_clean <- read_csv("strawberries_cleaned.csv")
# Extract chemical classifications (Use) from 'Domain' column
strawberry_clean <- strawberry_clean %>%
mutate(
Use = case_when(
str_detect(Domain, "FUNGICIDE") ~ "Fungicide",
str_detect(Domain, "INSECTICIDE") ~ "Insecticide",
str_detect(Domain, "HERBICIDE") ~ "Herbicide",
TRUE ~ "Other"
),
# Extract specific chemical names from the 'Domain Category' column
Chemical_Name = str_extract(`Domain_Category`, "\\((.*?)\\)"),
Chemical_Name = str_replace_all(Chemical_Name, "[()]", "")  # Remove parentheses
)
# Filter out rows where 'Use' or 'Chemical_Name' are NA
strawberry_clean <- strawberry_clean %>%
filter(!is.na(Use) & !is.na(Chemical_Name))
# Count the prevalence of each chemical category
chemical_summary <- strawberry_clean %>%
group_by(Use) %>%
summarise(Count = n()) %>%
arrange(desc(Count))
# Print the summary of chemical types
print(chemical_summary)
# Visualization: Bar chart of chemical types
ggplot(chemical_summary, aes(x = reorder(Use, -Count), y = Count, fill = Use)) +
geom_bar(stat = "identity") +
labs(title = "Prevalence of Chemical Types Used on Strawberries",
x = "Chemical Type",
y = "Count") +
theme_minimal()
# Visualization: Top chemicals within each category
top_chemicals <- strawberry_clean %>%
group_by(Use, Chemical_Name) %>%
summarise(Frequency = n()) %>%
arrange(desc(Frequency)) %>%
slice_max(Frequency, n = 5)  # Top 5 chemicals per category
ggplot(top_chemicals, aes(x = reorder(Chemical_Name, -Frequency), y = Frequency, fill = Use)) +
geom_bar(stat = "identity") +
facet_wrap(~ Use, scales = "free", nrow = 2) +  # Arrange categories in 2 rows for better spacing
labs(title = "Top Chemicals by Category",
x = "Chemical Name",
y = "Frequency") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 30, hjust = 1, size = 8),  # Adjust text angle and size
axis.text.y = element_text(size = 8),
strip.text = element_text(size = 10)) +  # Increase facet label size for clarity
coord_flip()  # Flip coordinates for horizontal bars
# Convert 'Value' column to numeric, replacing '(D)' or other placeholders with NA
strawberry_clean <- strawberry_clean %>%
mutate(Value = ifelse(Value %in% c("(D)", "(NA)"), NA, as.numeric(Value)))
acres_data <- strawberry_clean %>%
filter(str_detect(Data_Item, "ACRES GROWN"))
# Display the aggregated data to verify its content
print(acres_data)
# Filter data for acres grown in 2022 and group by state
acres_by_state <- strawberry_clean %>%
filter(str_detect(Data_Item, "ACRES GROWN"), Year == 2022) %>%
group_by(State) %>%
summarise(Total_Acres = sum(Value, na.rm = TRUE))
# Plot total acres grown by state
ggplot(acres_by_state, aes(x = reorder(State, -Total_Acres), y = Total_Acres)) +
geom_bar(stat = "identity", fill = "blue") +
labs(title = "Total Acres Grown for Strawberries by State (2022)",
x = "State",
y = "Total Acres Grown") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
# Filter data for bearing and non-bearing acres in 2022
bearing_acres <- strawberry_clean %>%
filter(str_detect(Data_Item, "ACRES BEARING"), Year == 2022) %>%
summarise(Total_Bearing_Acres = sum(Value, na.rm = TRUE))
non_bearing_acres <- strawberry_clean %>%
filter(str_detect(Data_Item, "ACRES NON-BEARING"), Year == 2022) %>%
summarise(Total_Non_Bearing_Acres = sum(Value, na.rm = TRUE))
# Combine the two into a single data frame
acres_type <- data.frame(
Type = c("Bearing", "Non-Bearing"),
Acres = c(bearing_acres$Total_Bearing_Acres, non_bearing_acres$Total_Non_Bearing_Acres)
)
# Plot bearing vs. non-bearing acres
ggplot(acres_type, aes(x = Type, y = Acres, fill = Type)) +
geom_bar(stat = "identity") +
labs(title = "Bearing vs. Non-Bearing Acres for Strawberries (2022)",
x = "Type",
y = "Total Acres") +
theme_minimal()
# Load necessary libraries
library(dplyr)
library(ggplot2)
library(readr)
# Convert 'Value' column to numeric, replacing '(D)' or other placeholders with NA
strawberry_clean <- strawberry_clean %>%
mutate(Value = ifelse(Value %in% c("(D)", "(NA)"), NA, as.numeric(Value)))
# Check the structure of the cleaned dataset
str(strawberry_clean)
summary(strawberry_clean)
### Visualization 1: Total Acres Grown for Strawberries by State
acres_data <- strawberry_clean %>%
filter(str_detect(Data_Item, "ACRES GROWN"))
ggplot(acres_data, aes(x = State, y = Value)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(title = "Acres Grown for Strawberries by State",
x = "State",
y = "Acres Grown") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
### Visualization 2: Operations with Area Grown by State
operations_data <- strawberry_clean %>%
filter(str_detect(Data_Item, "OPERATIONS WITH AREA GROWN"))
ggplot(operations_data, aes(x = State, y = Value)) +
geom_bar(stat = "identity", fill = "lightgreen") +
labs(title = "Operations with Area Grown for Strawberries by State",
x = "State",
y = "Number of Operations") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
### Visualization 3: Comparison of Bearing vs. Non-Bearing Acres by State
bearing_data <- strawberry_clean %>%
filter(str_detect(Data_Item, "ACRES BEARING"))
non_bearing_data <- strawberry_clean %>%
filter(str_detect(Data_Item, "ACRES NON-BEARING"))
combined_acres <- rbind(
bearing_data %>% mutate(Type = "Bearing"),
non_bearing_data %>% mutate(Type = "Non-Bearing")
)
ggplot(combined_acres, aes(x = State, y = Value, fill = Type)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Comparison of Bearing and Non-Bearing Acres by State",
x = "State",
y = "Acres",
fill = "Type") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
# Load necessary libraries
library(dplyr)
library(ggplot2)
library(stringr)
# Filter dataset for relevant productivity data (e.g., "ACRES GROWN" or "OPERATIONS WITH AREA")
productivity_data <- strawberry_clean %>%
filter(str_detect(Data_Item, "ACRES GROWN") | str_detect(Data_Item, "OPERATIONS WITH AREA"))
# Calculate average yield (or acres) per chemical use category
# Group by `Use` and calculate average for each chemical type
average_productivity <- productivity_data %>%
group_by(Use) %>%
summarise(Average_Productivity = mean(Value, na.rm = TRUE)) %>%
arrange(desc(Average_Productivity))
# Print summary of average productivity by chemical use category
print(average_productivity)
# Visualization: Boxplot of yield or acres by chemical type
ggplot(productivity_data, aes(x = Use, y = Value, fill = Use)) +
geom_boxplot() +
labs(title = "Comparison of Productivity (Yield/Acres) by Chemical Type",
x = "Chemical Type",
y = "Productivity (Yield/Acres)") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Load necessary libraries
library(dplyr)
library(ggplot2)
library(stringr)
# Check the number of records for each chemical type in the productivity dataset
productivity_distribution <- productivity_data %>%
group_by(Use) %>%
summarise(Record_Count = n(), NonMissing_Value_Count = sum(!is.na(Value)))
print(productivity_distribution)
# Filter dataset for relevant productivity data (e.g., "ACRES GROWN" or "OPERATIONS WITH AREA")
productivity_data <- strawberry_clean %>%
filter(str_detect(Data_Item, "ACRES GROWN") | str_detect(Data_Item, "OPERATIONS WITH AREA"))
# Calculate average yield (or acres) per chemical use category
# Group by `Use` and calculate average for each chemical type
average_productivity <- productivity_data %>%
group_by(Use) %>%
summarise(Average_Productivity = mean(Value, na.rm = TRUE)) %>%
arrange(desc(Average_Productivity))
# Print summary of average productivity by chemical use category
print(average_productivity)
# Visualization: Boxplot of yield or acres by chemical type
ggplot(productivity_data, aes(x = Use, y = Value, fill = Use)) +
geom_boxplot() +
labs(title = "Comparison of Productivity (Yield/Acres) by Chemical Type",
x = "Chemical Type",
y = "Productivity (Yield/Acres)") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Load necessary libraries
library(dplyr)
library(ggplot2)
library(stringr)
# Check the number of records for each chemical type in the productivity dataset
productivity_distribution <- productivity_data %>%
group_by(Use) %>%
summarise(Record_Count = n(), NonMissing_Value_Count = sum(!is.na(Value)))
print(productivity_distribution)
# Re-apply classification logic for 'Use' based on actual values in 'Domain'
strawberries_data <- strawberries_data %>%
mutate(
Use = case_when(
str_detect(Domain, regex("FUNGICIDE", ignore_case = TRUE)) ~ "FUNGICIDE",
str_detect(Domain, regex("INSECTICIDE", ignore_case = TRUE)) ~ "INSECTICIDE",
str_detect(Domain, regex("HERBICIDE", ignore_case = TRUE)) ~ "HERBICIDE",
TRUE ~ "Other"
)
)
# Filter dataset for relevant productivity data (e.g., "ACRES GROWN" or "OPERATIONS WITH AREA")
productivity_data <- strawberry_clean %>%
filter(str_detect(Data_Item, "ACRES GROWN") | str_detect(Data_Item, "OPERATIONS WITH AREA"))
# Calculate average yield (or acres) per chemical use category
# Group by `Use` and calculate average for each chemical type
average_productivity <- productivity_data %>%
group_by(Use) %>%
summarise(Average_Productivity = mean(Value, na.rm = TRUE)) %>%
arrange(desc(Average_Productivity))
# Print summary of average productivity by chemical use category
print(average_productivity)
# Visualization: Boxplot of yield or acres by chemical type
ggplot(productivity_data, aes(x = Use, y = Value, fill = Use)) +
geom_boxplot() +
labs(title = "Comparison of Productivity (Yield/Acres) by Chemical Type",
x = "Chemical Type",
y = "Productivity (Yield/Acres)") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Load necessary libraries
library(dplyr)
library(ggplot2)
library(stringr)
# Check the number of records for each chemical type in the productivity dataset
productivity_distribution <- productivity_data %>%
group_by(Use) %>%
summarise(Record_Count = n(), NonMissing_Value_Count = sum(!is.na(Value)))
print(productivity_distribution)
# Re-apply classification logic for 'Use' with case-insensitive and flexible pattern matching
strawberries_data <- strawberries_data %>%
mutate(
Use = case_when(
str_detect(Domain, regex("FUNGICIDE", ignore_case = TRUE)) ~ "FUNGICIDE",
str_detect(Domain, regex("INSECTICIDE", ignore_case = TRUE)) ~ "INSECTICIDE",
str_detect(Domain, regex("HERBICIDE", ignore_case = TRUE)) ~ "HERBICIDE",
TRUE ~ "Other"
)
)
# Filter dataset for relevant productivity data (e.g., "ACRES GROWN" or "OPERATIONS WITH AREA")
productivity_data <- strawberry_clean %>%
filter(str_detect(Data_Item, "ACRES GROWN") | str_detect(Data_Item, "OPERATIONS WITH AREA"))
# Calculate average yield (or acres) per chemical use category
# Group by `Use` and calculate average for each chemical type
average_productivity <- productivity_data %>%
group_by(Use) %>%
summarise(Average_Productivity = mean(Value, na.rm = TRUE)) %>%
arrange(desc(Average_Productivity))
# Print summary of average productivity by chemical use category
print(average_productivity)
# Visualization: Boxplot of yield or acres by chemical type
ggplot(productivity_data, aes(x = Use, y = Value, fill = Use)) +
geom_boxplot() +
labs(title = "Comparison of Productivity (Yield/Acres) by Chemical Type",
x = "Chemical Type",
y = "Productivity (Yield/Acres)") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Load necessary libraries
library(dplyr)
library(ggplot2)
library(stringr)
# Check the number of records for each chemical type in the productivity dataset
productivity_distribution <- productivity_data %>%
group_by(Use) %>%
summarise(Record_Count = n(), NonMissing_Value_Count = sum(!is.na(Value)))
print(productivity_distribution)
# Re-apply classification logic for 'Use' with case-insensitive and flexible pattern matching
strawberries_data <- strawberries_data %>%
mutate(
Use = case_when(
str_detect(Domain, regex("FUNGICIDE", ignore_case = TRUE)) ~ "FUNGICIDE",
str_detect(Domain, regex("INSECTICIDE", ignore_case = TRUE)) ~ "INSECTICIDE",
str_detect(Domain, regex("HERBICIDE", ignore_case = TRUE)) ~ "HERBICIDE",
TRUE ~ "Other"
)
)
# Check the distribution of chemical types after reclassification
table(strawberries_data$Use)
# Filter dataset for relevant productivity data (e.g., "ACRES GROWN" or "OPERATIONS WITH AREA")
productivity_data <- strawberry_clean %>%
filter(str_detect(Data_Item, "ACRES GROWN") | str_detect(Data_Item, "OPERATIONS WITH AREA"))
# Calculate average yield (or acres) per chemical use category
# Group by `Use` and calculate average for each chemical type
average_productivity <- productivity_data %>%
group_by(Use) %>%
summarise(Average_Productivity = mean(Value, na.rm = TRUE)) %>%
arrange(desc(Average_Productivity))
# Print summary of average productivity by chemical use category
print(average_productivity)
# Visualization: Boxplot of yield or acres by chemical type
ggplot(productivity_data, aes(x = Use, y = Value, fill = Use)) +
geom_boxplot() +
labs(title = "Comparison of Productivity (Yield/Acres) by Chemical Type",
x = "Chemical Type",
y = "Productivity (Yield/Acres)") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Load necessary libraries
library(dplyr)
library(ggplot2)
library(readr)
library(stringr)
# Load the cleaned dataset
strawberry_clean <- read_csv("strawberries_cleaned.csv")
# Step 1: Classify Chemical Types and Extract Chemical Names
strawberry_clean <- strawberry_clean %>%
mutate(
Use = case_when(
str_detect(Domain, regex("FUNGICIDE", ignore_case = TRUE)) ~ "FUNGICIDE",
str_detect(Domain, regex("INSECTICIDE", ignore_case = TRUE)) ~ "INSECTICIDE",
str_detect(Domain, regex("HERBICIDE", ignore_case = TRUE)) ~ "HERBICIDE",
TRUE ~ "Other"
),
# Extract specific chemical names from 'Domain_Category' column
Chemical_Name = str_extract(Domain_Category, "\\((.*?)\\)"),
Chemical_Name = str_replace_all(Chemical_Name, "[()]", "")  # Remove parentheses
)
# Step 2: Filter Out Rows Where 'Use' or 'Chemical_Name' Are NA
strawberry_clean <- strawberry_clean %>%
filter(!is.na(Use) & !is.na(Chemical_Name))
# Step 3: Summarize and Visualize Chemical Types Used
# Count the prevalence of each chemical category
chemical_summary <- strawberry_clean %>%
group_by(Use) %>%
summarise(Count = n()) %>%
arrange(desc(Count))
# Print summary of chemical types
print(chemical_summary)
# Visualization: Bar chart of chemical types
ggplot(chemical_summary, aes(x = reorder(Use, -Count), y = Count, fill = Use)) +
geom_bar(stat = "identity") +
labs(title = "Prevalence of Chemical Types Used on Strawberries",
x = "Chemical Type",
y = "Count") +
theme_minimal()
# Visualization: Top chemicals within each category
top_chemicals <- strawberry_clean %>%
group_by(Use, Chemical_Name) %>%
summarise(Frequency = n()) %>%
arrange(desc(Frequency)) %>%
slice_max(Frequency, n = 5)  # Top 5 chemicals per category
ggplot(top_chemicals, aes(x = reorder(Chemical_Name, -Frequency), y = Frequency, fill = Use)) +
geom_bar(stat = "identity") +
facet_wrap(~ Use, scales = "free", nrow = 2) +  # Arrange categories in 2 rows for better spacing
labs(title = "Top Chemicals by Category",
x = "Chemical Name",
y = "Frequency") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 30, hjust = 1, size = 8),  # Adjust text angle and size
axis.text.y = element_text(size = 8),
strip.text = element_text(size = 10)) +  # Increase facet label size for clarity
coord_flip()  # Flip coordinates for horizontal bars
# Step 4: Analyze Productivity by Chemical Use Type
# Filter dataset for relevant productivity data (e.g., "ACRES GROWN", "OPERATIONS WITH AREA", or similar indicators)
productivity_data <- strawberry_clean %>%
filter(str_detect(Data_Item, "ACRES GROWN") |
str_detect(Data_Item, "OPERATIONS WITH AREA") |
str_detect(Data_Item, "APPLICATIONS") |
str_detect(Data_Item, "CHEMICAL"))
# Calculate average yield (or acres) per chemical use category
average_productivity <- productivity_data %>%
group_by(Use) %>%
summarise(Average_Productivity = mean(Value, na.rm = TRUE)) %>%
arrange(desc(Average_Productivity))
# Print summary of average productivity by chemical use category
print(average_productivity)
# Visualization: Boxplot of yield or acres by chemical type
ggplot(productivity_data, aes(x = Use, y = Value, fill = Use)) +
geom_boxplot() +
labs(title = "Comparison of Productivity (Yield/Acres) by Chemical Type",
x = "Chemical Type",
y = "Productivity (Yield/Acres)") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Step 1: Classify Chemical Types and Extract Chemical Names
strawberry_clean <- strawberry_clean %>%
mutate(
Use = case_when(
str_detect(Domain, regex("FUNGICIDE", ignore_case = TRUE)) ~ "FUNGICIDE",
str_detect(Domain, regex("INSECTICIDE", ignore_case = TRUE)) ~ "INSECTICIDE",
str_detect(Domain, regex("HERBICIDE", ignore_case = TRUE)) ~ "HERBICIDE",
TRUE ~ "Other"
),
# Extract specific chemical names from 'Domain_Category' column
Chemical_Name = str_extract(Domain_Category, "\\((.*?)\\)"),
Chemical_Name = str_replace_all(Chemical_Name, "[()]", "")  # Remove parentheses
)
# Step 2: Filter Out Rows Where 'Use' or 'Chemical_Name' Are NA
strawberry_clean <- strawberry_clean %>%
filter(!is.na(Use) & !is.na(Chemical_Name))
# Step 3: Analyze Productivity by Chemical Use Type
# Filter dataset for relevant productivity data (e.g., "ACRES GROWN", "OPERATIONS WITH AREA", "APPLICATIONS", or "CHEMICAL")
productivity_data <- strawberry_clean %>%
filter(str_detect(Data_Item, "ACRES GROWN") |
str_detect(Data_Item, "OPERATIONS WITH AREA") |
str_detect(Data_Item, "APPLICATIONS") |
str_detect(Data_Item, "CHEMICAL"))
# Calculate average productivity (yield/acres) per chemical use category
average_productivity <- productivity_data %>%
group_by(Use) %>%
summarise(Average_Productivity = mean(Value, na.rm = TRUE)) %>%
arrange(desc(Average_Productivity))
# Print summary of average productivity by chemical use category
print(average_productivity)
# Visualization: Boxplot of productivity (yield/acres) by chemical type
ggplot(productivity_data, aes(x = Use, y = Value, fill = Use)) +
geom_boxplot() +
labs(title = "Comparison of Productivity (Yield/Acres) by Chemical Type",
x = "Chemical Type",
y = "Productivity (Yield/Acres)") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
