#| label: load libraries
#| warning: false
#| message: false
library(knitr)
library(kableExtra)
library(tidyverse)
library(stringr)
#| label: read data - glimpse
strawberry <- read_csv("strawberries25_v3.csv", col_names = TRUE)
glimpse(strawberry)
## is every line associated with a state?
state_all <- strawberry |> distinct(State)
state_all1 <- strawberry |> group_by(State) |> count()
## every row is associated with a state
sum(state_all1$n) == dim(strawberry)[1]
## to get an idea of the data -- looking at california only
calif_census <- strawberry |> filter((State=="CALIFORNIA") & (Program=="CENSUS"))
calif_census <- calif_census |> select(Year, `Data Item`, Value)
###
calif_survey <- strawberry |> filter((State=="CALIFORNIA") & (Program=="SURVEY"))
calif_survey <- strawberry |> select(Year, Period, `Data Item`, Value)
#|label: drop 1-item columns
drop_one_value_col <- function(df){
drop <- NULL
for(i in 1:dim(df)[2]){
if((df |> distinct(df[,i]) |> count()) == 1){
drop = c(drop, i)
} }
if(is.null(drop)){return("none")}else{
print("Columns dropped:")
print(colnames(df)[drop])
strawberry <- df[, -1*drop]
}
}
## use the function
strawberry <- drop_one_value_col(strawberry)
drop_one_value_col(strawberry)
#|label: split Data Item
strawberry <- strawberry |>
separate_wider_delim(  cols = `Data Item`,
delim = ",",
names = c("Fruit",
"Category",
"Item",
"Metric"),
too_many = "error",
too_few = "align_start"
)
## Use too_many and too_few to set up the separation operation.
#|label: fix the leading space
# note
strawberry$Category[1]
# strawberry$Item[2]
# strawberry$Metric[6]
# strawberry$Domain[1]
##
## trim white space
strawberry$Category <- str_trim(strawberry$Category, side = "both")
strawberry$Item <- str_trim(strawberry$Item, side = "both")
strawberry$Metric <- str_trim(strawberry$Metric, side = "both")
unique(strawberry$Fruit)
## generate a list of rows with the production and price information
spr <- which((strawberry$Fruit=="STRAWBERRIES - PRODUCTION") | (strawberry$Fruit=="STRAWBERRIES - PRICE RECEIVED"))
strw_prod_price <- strawberry |> slice(spr)
## this has the census data, too
strw_chem <- strawberry |> slice(-1*spr)  ## too soon
knitr::opts_chunk$set(echo = TRUE)
#|label: split Data Item
strawberry <- strawberry |>
separate_wider_delim(  cols = `Data Item`,
delim = ",",
names = c("Fruit",
"Category",
"Item",
"Metric"),
too_many = "error",
too_few = "align_start"
)
#| label: load libraries
#| warning: false
#| message: false
library(knitr)
library(kableExtra)
library(tidyverse)
library(stringr)
#| label: read data - glimpse
strawberry <- read_csv("strawberries25_v3.csv", col_names = TRUE)
glimpse(strawberry)
#| label: read data - glimpse
strawberry <- read_csv("strawberries25_v3.csv", col_names = TRUE)
glimpse(strawberry)
## is every line associated with a state?
state_all <- strawberry |> distinct(State)
state_all1 <- strawberry |> group_by(State) |> count()
## every row is associated with a state
sum(state_all1$n) == dim(strawberry)[1]
## to get an idea of the data -- looking at california only
calif_census <- strawberry |> filter((State=="CALIFORNIA") & (Program=="CENSUS"))
calif_census <- calif_census |> select(Year, `Data Item`, Value)
###
calif_survey <- strawberry |> filter((State=="CALIFORNIA") & (Program=="SURVEY"))
calif_survey <- strawberry |> select(Year, Period, `Data Item`, Value)
#|label: drop 1-item columns
drop_one_value_col <- function(df){
drop <- NULL
for(i in 1:dim(df)[2]){
if((df |> distinct(df[,i]) |> count()) == 1){
drop = c(drop, i)
} }
if(is.null(drop)){return("none")}else{
print("Columns dropped:")
print(colnames(df)[drop])
strawberry <- df[, -1*drop]
}
}
## use the function
strawberry <- drop_one_value_col(strawberry)
drop_one_value_col(strawberry)
#|label: split Data Item
strawberry <- strawberry |>
separate_wider_delim(  cols = `Data Item`,
delim = ",",
names = c("Fruit",
"Category",
"Item",
"Metric"),
too_many = "error",
too_few = "align_start"
)
## Use too_many and too_few to set up the separation operation.
# Save the updated dataframe to a new CSV file
#|label: fix the leading space
# note
strawberry$Category[1]
# strawberry$Item[2]
# strawberry$Metric[6]
# strawberry$Domain[1]
##
## trim white space
strawberry$Category <- str_trim(strawberry$Category, side = "both")
strawberry$Item <- str_trim(strawberry$Item, side = "both")
strawberry$Metric <- str_trim(strawberry$Metric, side = "both")
write.csv(strawberry, file = "strawberry_separated.csv", row.names = FALSE)
#|label: fix the leading space
# note
strawberry$Category[1]
# strawberry$Item[2]
# strawberry$Metric[6]
# strawberry$Domain[1]
##
## trim white space
strawberry$Category <- str_trim(strawberry$Category, side = "both")
strawberry$Item <- str_trim(strawberry$Item, side = "both")
strawberry$Metric <- str_trim(strawberry$Metric, side = "both")
#|label: split Data Item
strawberry <- strawberry |>
separate_wider_delim(  cols = `Data Item`,
delim = ",",
names = c("Fruit",
"Category",
"Item",
"Metric"),
too_many = "error",
too_few = "align_start"
)
#| label: load libraries
#| warning: false
#| message: false
library(knitr)
library(kableExtra)
library(tidyverse)
library(stringr)
#| label: read data - glimpse
strawberry <- read_csv("strawberries25_v3.csv", col_names = TRUE)
glimpse(strawberry)
## is every line associated with a state?
state_all <- strawberry |> distinct(State)
state_all1 <- strawberry |> group_by(State) |> count()
## every row is associated with a state
sum(state_all1$n) == dim(strawberry)[1]
## to get an idea of the data -- looking at california only
calif_census <- strawberry |> filter((State=="CALIFORNIA") & (Program=="CENSUS"))
calif_census <- calif_census |> select(Year, `Data Item`, Value)
###
calif_survey <- strawberry |> filter((State=="CALIFORNIA") & (Program=="SURVEY"))
calif_survey <- strawberry |> select(Year, Period, `Data Item`, Value)
#|label: drop 1-item columns
drop_one_value_col <- function(df){
drop <- NULL
for(i in 1:dim(df)[2]){
if((df |> distinct(df[,i]) |> count()) == 1){
drop = c(drop, i)
} }
if(is.null(drop)){return("none")}else{
print("Columns dropped:")
print(colnames(df)[drop])
strawberry <- df[, -1*drop]
}
}
## use the function
strawberry <- drop_one_value_col(strawberry)
drop_one_value_col(strawberry)
#|label: split Data Item
strawberry <- strawberry |>
separate_wider_delim(  cols = `Data Item`,
delim = ",",
names = c("Fruit",
"Category",
"Item",
"Metric"),
too_many = "error",
too_few = "align_start"
)
## Use too_many and too_few to set up the separation operation.
# Save the updated dataframe to a new CSV file
#|label: fix the leading space
# note
strawberry$Category[1]
# strawberry$Item[2]
# strawberry$Metric[6]
# strawberry$Domain[1]
##
## trim white space
strawberry$Category <- str_trim(strawberry$Category, side = "both")
strawberry$Item <- str_trim(strawberry$Item, side = "both")
strawberry$Metric <- str_trim(strawberry$Metric, side = "both")
write.csv(strawberry, file = "strawberry_separated.csv", row.names = FALSE)
#|label: fix the leading space
# note
strawberry$Category[1]
# strawberry$Item[2]
# strawberry$Metric[6]
# strawberry$Domain[1]
##
## trim white space
strawberry$Category <- str_trim(strawberry$Category, side = "both")
strawberry$Item <- str_trim(strawberry$Item, side = "both")
strawberry$Metric <- str_trim(strawberry$Metric, side = "both")
unique(strawberry$Fruit)
## generate a list of rows with the production and price information
spr <- which((strawberry$Fruit=="STRAWBERRIES - PRODUCTION") | (strawberry$Fruit=="STRAWBERRIES - PRICE RECEIVED"))
strw_prod_price <- strawberry |> slice(spr)
## this has the census data, too
strw_chem <- strawberry |> slice(-1*spr)
knitr::opts_chunk$set(echo = TRUE)
#| label: load libraries
#| warning: false
#| message: false
library(knitr)
library(kableExtra)
library(tidyverse)
library(stringr)
#| label: read data - glimpse
strawberry <- read_csv("strawberries25_v3.csv", col_names = TRUE)
glimpse(strawberry)
## is every line associated with a state?
state_all <- strawberry |> distinct(State)
state_all1 <- strawberry |> group_by(State) |> count()
## every row is associated with a state
sum(state_all1$n) == dim(strawberry)[1]
## to get an idea of the data -- looking at california only
calif_census <- strawberry |> filter((State=="CALIFORNIA") & (Program=="CENSUS"))
calif_census <- calif_census |> select(Year, `Data Item`, Value)
###
calif_survey <- strawberry |> filter((State=="CALIFORNIA") & (Program=="SURVEY"))
calif_survey <- strawberry |> select(Year, Period, `Data Item`, Value)
#|label: drop 1-item columns
drop_one_value_col <- function(df){
drop <- NULL
for(i in 1:dim(df)[2]){
if((df |> distinct(df[,i]) |> count()) == 1){
drop = c(drop, i)
} }
if(is.null(drop)){return("none")}else{
print("Columns dropped:")
print(colnames(df)[drop])
strawberry <- df[, -1*drop]
}
}
## use the function
strawberry <- drop_one_value_col(strawberry)
drop_one_value_col(strawberry)
#|label: split Data Item
strawberry <- strawberry |>
separate_wider_delim(  cols = `Data Item`,
delim = ",",
names = c("Fruit",
"Category",
"Item",
"Metric"),
too_many = "error",
too_few = "align_start"
)
## Use too_many and too_few to set up the separation operation.
# Save the updated dataframe to a new CSV file
#|label: fix the leading space
# note
strawberry$Category[1]
# strawberry$Item[2]
# strawberry$Metric[6]
# strawberry$Domain[1]
##
## trim white space
strawberry$Category <- str_trim(strawberry$Category, side = "both")
strawberry$Item <- str_trim(strawberry$Item, side = "both")
strawberry$Metric <- str_trim(strawberry$Metric, side = "both")
write.csv(strawberry, file = "strawberry_separated.csv", row.names = FALSE)
#|label: fix the leading space
# note
strawberry$Category[1]
# strawberry$Item[2]
# strawberry$Metric[6]
# strawberry$Domain[1]
##
## trim white space
strawberry$Category <- str_trim(strawberry$Category, side = "both")
strawberry$Item <- str_trim(strawberry$Item, side = "both")
strawberry$Metric <- str_trim(strawberry$Metric, side = "both")
unique(strawberry$Fruit)
## generate a list of rows with the production and price information
spr <- which((strawberry$Fruit=="STRAWBERRIES - PRODUCTION") | (strawberry$Fruit=="STRAWBERRIES - PRICE RECEIVED"))
strw_prod_price <- strawberry |> slice(spr)
## this has the census data, too
strw_chem <- strawberry |> slice(-1*spr)
write.csv(strawberry, file = "strawberry_separated.csv", row.names = FALSE)
#|label: split srawberry into census and survey pieces
strw_b_sales <- strawberry |> filter(Program == "CENSUS")
strw_b_chem <- strawberry |> filter(Program == "SURVEY")
nrow(strawberry) == (nrow(strw_b_chem) + nrow(strw_b_sales))
## Move marketing-related rows in strw_b_chem
## to strw_b_sales
knitr::opts_chunk$set(echo = TRUE)
#| label: load libraries
#| warning: false
#| message: false
library(knitr)
library(kableExtra)
library(tidyverse)
library(stringr)
#| label: read data - glimpse
strawberry <- read_csv("strawberries25_v3.csv", col_names = TRUE)
glimpse(strawberry)
## is every line associated with a state?
state_all <- strawberry |> distinct(State)
state_all1 <- strawberry |> group_by(State) |> count()
## every row is associated with a state
sum(state_all1$n) == dim(strawberry)[1]
## to get an idea of the data -- looking at california only
calif_census <- strawberry |> filter((State=="CALIFORNIA") & (Program=="CENSUS"))
calif_census <- calif_census |> select(Year, `Data Item`, Value)
###
calif_survey <- strawberry |> filter((State=="CALIFORNIA") & (Program=="SURVEY"))
calif_survey <- strawberry |> select(Year, Period, `Data Item`, Value)
#|label: drop 1-item columns
drop_one_value_col <- function(df){
drop <- NULL
for(i in 1:dim(df)[2]){
if((df |> distinct(df[,i]) |> count()) == 1){
drop = c(drop, i)
} }
if(is.null(drop)){return("none")}else{
print("Columns dropped:")
print(colnames(df)[drop])
strawberry <- df[, -1*drop]
}
}
## use the function
strawberry <- drop_one_value_col(strawberry)
drop_one_value_col(strawberry)
#|label: split Data Item
strawberry <- strawberry |>
separate_wider_delim(  cols = `Data Item`,
delim = ",",
names = c("Fruit",
"Category",
"Item",
"Metric"),
too_many = "error",
too_few = "align_start"
)
## Use too_many and too_few to set up the separation operation.
# Save the updated dataframe to a new CSV file
#|label: fix the leading space
# note
strawberry$Category[1]
# strawberry$Item[2]
# strawberry$Metric[6]
# strawberry$Domain[1]
##
## trim white space
strawberry$Category <- str_trim(strawberry$Category, side = "both")
strawberry$Item <- str_trim(strawberry$Item, side = "both")
strawberry$Metric <- str_trim(strawberry$Metric, side = "both")
write.csv(strawberry, file = "strawberry_separated.csv", row.names = FALSE)
#|label: fix the leading space
# note
strawberry$Category[1]
# strawberry$Item[2]
# strawberry$Metric[6]
# strawberry$Domain[1]
##
## trim white space
strawberry$Category <- str_trim(strawberry$Category, side = "both")
strawberry$Item <- str_trim(strawberry$Item, side = "both")
strawberry$Metric <- str_trim(strawberry$Metric, side = "both")
unique(strawberry$Fruit)
## generate a list of rows with the production and price information
spr <- which((strawberry$Fruit=="STRAWBERRIES - PRODUCTION") | (strawberry$Fruit=="STRAWBERRIES - PRICE RECEIVED"))
strw_prod_price <- strawberry |> slice(spr)
## this has the census data, too
strw_chem <- strawberry |> slice(-1*spr)
#|label: split srawberry into census and survey pieces
strw_b_sales <- strawberry |> filter(Program == "CENSUS")
strw_b_chem <- strawberry |> filter(Program == "SURVEY")
nrow(strawberry) == (nrow(strw_b_chem) + nrow(strw_b_sales))
## Move marketing-related rows in strw_b_chem
## to strw_b_sales
write.csv(strawberry, file = "strawberry_separated.csv", row.names = FALSE)
#|label: plot 1
plot1_data <- strawberry |>
select(c(Year, State, Category, Value)) |>
filter((Year == 2021) & (Category == "ORGANIC - OPERATIONS WITH SALES"))
plot1_data$Value <- as.numeric(plot1_data$Value)
plot1_data <- plot1_data |> arrange(desc(Value))
ggplot(plot1_data, aes(x=reorder(State, -Value), y=Value)) +
geom_bar(stat = "identity") +
theme(axis.text.x=element_text(angle=45,hjust=1)) +
labs(x = "States", y = "Count",
title ="Number of Organic Strawberry operations with Sales in 2021")
## plot 2
plot2_data <- strawberry |>
select(c(Year, State, Category, Item, Value)) |>
filter((Year == 2021) &
(Category == "ORGANIC - SALES") &
(Item == "MEASURED IN $") &
(Value != "(D)"))
plot2_data$Value <- as.numeric(gsub(",", "", plot2_data$Value))
plot2_data <- plot1_data |> arrange(desc(Value))
ggplot(plot2_data, aes(x=reorder(State, -Value), y=Value)) +
geom_bar(stat = "identity") +
theme(axis.text.x=element_text(angle=45,hjust=1)) +
labs(x = "States", y = "Sales",
title ="Organic Strawberry Sales ($) in 2021")
cc <- strawberry |> distinct(Category)
cca <- strawberry |>
distinct(Domain)
## Split domain into two columns "type" and "subtype"
strawberry <- strawberry |>
separate_wider_delim(  cols = Domain,
delim = ",",
names = c("type",
"subtype"),
too_many = "error",
too_few = "align_start"
)
## check the result
ctype <- strawberry |> distinct(type)
csubtype <- strawberry |> distinct(subtype)
##
##
yr <- strawberry |> distinct(Year)
