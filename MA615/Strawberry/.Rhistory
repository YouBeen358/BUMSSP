# Step 1: Read the CSV file
strawberry <- read_csv("strawberry_separated.csv")
# Step 2: Remove the 'Domain' and 'Domain Category' columns
strawberry_clean <- strawberry %>%
select(-Domain, -`Domain Category`)  # Remove the unwanted columns
# Step 3: Save the cleaned dataset to a new CSV file
write_csv(strawberry_clean, "strawberry_separated_clean.csv")
# Step 2: Clean and organize the 'Use', 'Name', and 'Code' columns
strawberry_clean <- strawberry %>%
# Extract 'Use' from the 'Domain' column
mutate(
Use = case_when(
str_detect(`Domain`, "FUNGICIDE") ~ "FUNGICIDE",
str_detect(`Domain`, "INSECTICIDE") ~ "INSECTICIDE",
str_detect(`Domain`, "HERBICIDE") ~ "HERBICIDE",
TRUE ~ NA_character_
),
# Extract 'Name' from the 'Domain Category' column, removing the '= CODE' part
Name = str_extract(`Domain Category`, "\\((.*?)\\)"),
Name = str_replace_all(Name, " = \\d+", ""),  # Remove the '= CODE' part
Name = str_replace_all(Name, "[()]", ""),    # Remove parentheses around 'Name'
# Extract 'Code' from the 'Domain Category' column (after the '=' sign)
Code = str_extract(`Domain Category`, "\\d+"),  # Extract only the numeric part of the code
Code = str_trim(Code)  # Clean up any remaining whitespace
) %>%
# Remove rows where 'Use', 'Name', or 'Code' are NA
drop_na(Use, Name, Code)
# Step 3: Keep all other columns alongside the cleaned 'Use', 'Name', and 'Code' columns
strawberry_clean <- strawberry_clean %>%
select(Program, Year, Period, `Geo Level`, State, `State ANSI`, `Ag District`, `Ag District Code`,
County, `County ANSI`, Fruit, Category, Item, Metric, Domain, `Domain Category`, Value, `CV (%)`,
Use, Name, Code)
# Step 1: Read the CSV file
strawberry <- read_csv("strawberry_separated.csv")
# Step 2: Remove the 'Domain' and 'Domain Category' columns
strawberry_clean <- strawberry %>%
select(-Domain, -`Domain Category`)  # Remove the unwanted columns
# Step 3: Save the cleaned dataset to a new CSV file
write_csv(strawberry_clean, "strawberry_separated_clean.csv")
knitr::opts_chunk$set(echo = TRUE)
#| label: load libraries
#| warning: false
#| message: false
library(knitr)
library(kableExtra)
library(tidyverse)
library(stringr)
#| label: read data - glimpse
strawberry <- read_csv("strawberries25_v3.csv", col_names = TRUE)
glimpse(strawberry)
## is every line associated with a state?
state_all <- strawberry |> distinct(State)
state_all1 <- strawberry |> group_by(State) |> count()
## every row is associated with a state
sum(state_all1$n) == dim(strawberry)[1]
## to get an idea of the data -- looking at california only
calif_census <- strawberry |> filter((State=="CALIFORNIA") & (Program=="CENSUS"))
calif_census <- calif_census |> select(Year, `Data Item`, Value)
###
calif_survey <- strawberry |> filter((State=="CALIFORNIA") & (Program=="SURVEY"))
calif_survey <- strawberry |> select(Year, Period, `Data Item`, Value)
#|label: drop 1-item columns
drop_one_value_col <- function(df){
drop <- NULL
for(i in 1:dim(df)[2]){
if((df |> distinct(df[,i]) |> count()) == 1){
drop = c(drop, i)
} }
if(is.null(drop)){return("none")}else{
print("Columns dropped:")
print(colnames(df)[drop])
strawberry <- df[, -1*drop]
}
}
## use the function
strawberry <- drop_one_value_col(strawberry)
drop_one_value_col(strawberry)
#|label: split Data Item
strawberry <- strawberry |>
separate_wider_delim(  cols = `Data Item`,
delim = ",",
names = c("Fruit",
"Category",
"Item",
"Metric"),
too_many = "error",
too_few = "align_start"
)
## Use too_many and too_few to set up the separation operation.
# Save the updated dataframe to a new CSV file
#|label: fix the leading space
# note
strawberry$Category[1]
# strawberry$Item[2]
# strawberry$Metric[6]
# strawberry$Domain[1]
##
## trim white space
strawberry$Category <- str_trim(strawberry$Category, side = "both")
strawberry$Item <- str_trim(strawberry$Item, side = "both")
strawberry$Metric <- str_trim(strawberry$Metric, side = "both")
write.csv(strawberry, file = "strawberry_separated.csv", row.names = FALSE)
#|label: fix the leading space
# note
strawberry$Category[1]
# strawberry$Item[2]
# strawberry$Metric[6]
# strawberry$Domain[1]
##
## trim white space
strawberry$Category <- str_trim(strawberry$Category, side = "both")
strawberry$Item <- str_trim(strawberry$Item, side = "both")
strawberry$Metric <- str_trim(strawberry$Metric, side = "both")
unique(strawberry$Fruit)
## generate a list of rows with the production and price information
spr <- which((strawberry$Fruit=="STRAWBERRIES - PRODUCTION") | (strawberry$Fruit=="STRAWBERRIES - PRICE RECEIVED"))
strw_prod_price <- strawberry |> slice(spr)
## this has the census data, too
strw_chem <- strawberry |> slice(-1*spr)
#|label: split srawberry into census and survey pieces
strw_b_sales <- strawberry |> filter(Program == "CENSUS")
strw_b_chem <- strawberry |> filter(Program == "SURVEY")
nrow(strawberry) == (nrow(strw_b_chem) + nrow(strw_b_sales))
## Move marketing-related rows in strw_b_chem
## to strw_b_sales
write.csv(strawberry, file = "strawberry_separated.csv", row.names = FALSE)
# Step 2: Clean and organize the 'Use', 'Name', and 'Code' columns
strawberry_clean <- strawberry %>%
# Extract 'Use' from the 'Domain' column
mutate(
Use = case_when(
str_detect(`Domain`, "FUNGICIDE") ~ "FUNGICIDE",
str_detect(`Domain`, "INSECTICIDE") ~ "INSECTICIDE",
str_detect(`Domain`, "HERBICIDE") ~ "HERBICIDE",
TRUE ~ NA_character_
),
# Extract 'Name' from the 'Domain Category' column, removing the '= CODE' part
Name = str_extract(`Domain Category`, "\\((.*?)\\)"),
Name = str_replace_all(Name, " = \\d+", ""),  # Remove the '= CODE' part
Name = str_replace_all(Name, "[()]", ""),    # Remove parentheses around 'Name'
# Extract 'Code' from the 'Domain Category' column (after the '=' sign)
Code = str_extract(`Domain Category`, "\\d+"),  # Extract only the numeric part of the code
Code = str_trim(Code)  # Clean up any remaining whitespace
) %>%
# Remove rows where 'Use', 'Name', or 'Code' are NA
drop_na(Use, Name, Code)
# Step 3: Keep all other columns alongside the cleaned 'Use', 'Name', and 'Code' columns
strawberry_clean <- strawberry_clean %>%
select(Program, Year, Period, `Geo Level`, State, `State ANSI`, `Ag District`, `Ag District Code`,
County, `County ANSI`, Fruit, Category, Item, Metric, Domain, `Domain Category`, Value, `CV (%)`,
Use, Name, Code)
# Step 2: Remove the 'Domain' and 'Domain Category' columns
strawberry_clean <- strawberry %>%
select(-Domain, -`Domain Category`)  # Remove the unwanted columns
# Step 3: Save the cleaned dataset to a new CSV file
write_csv(strawberry_clean, "strawberry_separated_clean.csv")
knitr::opts_chunk$set(echo = TRUE)
#| label: load libraries
#| warning: false
#| message: false
library(knitr)
library(kableExtra)
library(tidyverse)
library(stringr)
#| label: read data - glimpse
strawberry <- read_csv("strawberries25_v3.csv", col_names = TRUE)
glimpse(strawberry)
## is every line associated with a state?
state_all <- strawberry |> distinct(State)
state_all1 <- strawberry |> group_by(State) |> count()
## every row is associated with a state
sum(state_all1$n) == dim(strawberry)[1]
## to get an idea of the data -- looking at california only
calif_census <- strawberry |> filter((State=="CALIFORNIA") & (Program=="CENSUS"))
calif_census <- calif_census |> select(Year, `Data Item`, Value)
###
calif_survey <- strawberry |> filter((State=="CALIFORNIA") & (Program=="SURVEY"))
calif_survey <- strawberry |> select(Year, Period, `Data Item`, Value)
#|label: drop 1-item columns
drop_one_value_col <- function(df){
drop <- NULL
for(i in 1:dim(df)[2]){
if((df |> distinct(df[,i]) |> count()) == 1){
drop = c(drop, i)
} }
if(is.null(drop)){return("none")}else{
print("Columns dropped:")
print(colnames(df)[drop])
strawberry <- df[, -1*drop]
}
}
## use the function
strawberry <- drop_one_value_col(strawberry)
drop_one_value_col(strawberry)
#|label: split Data Item
strawberry <- strawberry |>
separate_wider_delim(  cols = `Data Item`,
delim = ",",
names = c("Fruit",
"Category",
"Item",
"Metric"),
too_many = "error",
too_few = "align_start"
)
## Use too_many and too_few to set up the separation operation.
# Save the updated dataframe to a new CSV file
#|label: fix the leading space
# note
strawberry$Category[1]
# strawberry$Item[2]
# strawberry$Metric[6]
# strawberry$Domain[1]
##
## trim white space
strawberry$Category <- str_trim(strawberry$Category, side = "both")
strawberry$Item <- str_trim(strawberry$Item, side = "both")
strawberry$Metric <- str_trim(strawberry$Metric, side = "both")
write.csv(strawberry, file = "strawberry_separated.csv", row.names = FALSE)
#|label: fix the leading space
# note
strawberry$Category[1]
# strawberry$Item[2]
# strawberry$Metric[6]
# strawberry$Domain[1]
##
## trim white space
strawberry$Category <- str_trim(strawberry$Category, side = "both")
strawberry$Item <- str_trim(strawberry$Item, side = "both")
strawberry$Metric <- str_trim(strawberry$Metric, side = "both")
unique(strawberry$Fruit)
## generate a list of rows with the production and price information
spr <- which((strawberry$Fruit=="STRAWBERRIES - PRODUCTION") | (strawberry$Fruit=="STRAWBERRIES - PRICE RECEIVED"))
strw_prod_price <- strawberry |> slice(spr)
## this has the census data, too
strw_chem <- strawberry |> slice(-1*spr)
#|label: split srawberry into census and survey pieces
strw_b_sales <- strawberry |> filter(Program == "CENSUS")
strw_b_chem <- strawberry |> filter(Program == "SURVEY")
nrow(strawberry) == (nrow(strw_b_chem) + nrow(strw_b_sales))
## Move marketing-related rows in strw_b_chem
## to strw_b_sales
write.csv(strawberry, file = "strawberry_separated.csv", row.names = FALSE)
strawberry <- read_csv("strawberry_separated.csv")
# Step 2: Clean and organize the 'Use', 'Name', and 'Code' columns
strawberry_clean <- strawberry %>%
# Extract 'Use' from the 'Domain' column
mutate(
Use = case_when(
str_detect(`Domain`, "FUNGICIDE") ~ "FUNGICIDE",
str_detect(`Domain`, "INSECTICIDE") ~ "INSECTICIDE",
str_detect(`Domain`, "HERBICIDE") ~ "HERBICIDE",
TRUE ~ NA_character_
),
# Extract 'Name' from the 'Domain Category' column, removing the '= CODE' part
Name = str_extract(`Domain Category`, "\\((.*?)\\)"),
Name = str_replace_all(Name, " = \\d+", ""),  # Remove the '= CODE' part
Name = str_replace_all(Name, "[()]", ""),    # Remove parentheses around 'Name'
# Extract 'Code' from the 'Domain Category' column (after the '=' sign)
Code = str_extract(`Domain Category`, "\\d+"),  # Extract only the numeric part of the code
Code = str_trim(Code)  # Clean up any remaining whitespace
) %>%
# Remove rows where 'Use', 'Name', or 'Code' are NA
drop_na(Use, Name, Code)
# Step 3: Keep all other columns alongside the cleaned 'Use', 'Name', and 'Code' columns
strawberry_clean <- strawberry_clean %>%
select(Program, Year, Period, `Geo Level`, State, `State ANSI`, `Ag District`, `Ag District Code`,
County, `County ANSI`, Fruit, Category, Item, Metric, Domain, `Domain Category`, Value, `CV (%)`,
Use, Name, Code)
# Step 2: Remove the 'Domain' and 'Domain Category' columns
strawberry_clean <- strawberry %>%
select(-Domain, -`Domain Category`)  # Remove the unwanted columns
# Step 3: Save the cleaned dataset to a new CSV file
write_csv(strawberry_clean, "strawberry_separated_clean.csv")
strawberry <- read_csv("strawberry_separated.csv")
# Step 2: Clean and organize the 'Use', 'Name', and 'Code' columns
strawberry_clean <- strawberry %>%
# Extract 'Use' from the 'Domain' column
mutate(
Use = case_when(
str_detect(`Domain`, "FUNGICIDE") ~ "FUNGICIDE",
str_detect(`Domain`, "INSECTICIDE") ~ "INSECTICIDE",
str_detect(`Domain`, "HERBICIDE") ~ "HERBICIDE",
TRUE ~ NA_character_
),
# Extract 'Name' from the 'Domain Category' column, removing the '= CODE' part
Name = str_extract(`Domain Category`, "\\((.*?)\\)"),
Name = str_replace_all(Name, " = \\d+", ""),  # Remove the '= CODE' part
Name = str_replace_all(Name, "[()]", ""),    # Remove parentheses around 'Name'
# Extract 'Code' from the 'Domain Category' column (after the '=' sign)
Code = str_extract(`Domain Category`, "\\d+"),  # Extract only the numeric part of the code
Code = str_trim(Code)  # Clean up any remaining whitespace
) %>%
# Remove rows where 'Use', 'Name', or 'Code' are NA
drop_na(Use, Name, Code)
# Step 3: Keep all other columns alongside the cleaned 'Use', 'Name', and 'Code' columns
strawberry_clean <- strawberry_clean %>%
select(Program, Year, Period, `Geo Level`, State, `State ANSI`, `Ag District`, `Ag District Code`,
County, `County ANSI`, Fruit, Category, Item, Metric, Domain, `Domain Category`, Value, `CV (%)`,
Use, Name, Code)
strawberry <- read_csv("strawberry_separated.csv")
# Step 2: Remove the 'Domain' and 'Domain Category' columns
strawberry_clean <- strawberry %>%
select(-Domain, -`Domain Category`)  # Remove the unwanted columns
# Step 3: Save the cleaned dataset to a new CSV file
write_csv(strawberry_clean, "strawberry_separated_clean.csv")
# Load required libraries
library(tidyverse)
# Step 1: Read the CSV file
strawberry <- read_csv("strawberry_separated.csv")
# Step 2: Clean and organize the 'Use', 'Name', and 'Code' columns
strawberry_clean <- strawberry %>%
# Extract 'Use' from the 'Domain' column
mutate(
Use = case_when(
str_detect(`Domain`, "FUNGICIDE") ~ "FUNGICIDE",
str_detect(`Domain`, "INSECTICIDE") ~ "INSECTICIDE",
str_detect(`Domain`, "HERBICIDE") ~ "HERBICIDE",
TRUE ~ NA_character_
),
# Extract 'Name' from the 'Domain Category' column, removing the '= CODE' part
Name = str_extract(`Domain Category`, "\\((.*?)\\)"),
Name = str_replace_all(Name, " = \\d+", ""),  # Remove the '= CODE' part
Name = str_replace_all(Name, "[()]", ""),    # Remove parentheses around 'Name'
# Extract 'Code' from the 'Domain Category' column (after the '=' sign)
Code = str_extract(`Domain Category`, "\\d+"),  # Extract only the numeric part of the code
Code = str_trim(Code)  # Clean up any remaining whitespace
) %>%
# Remove rows where 'Use', 'Name', or 'Code' are NA
drop_na(Use, Name, Code)
# Step 3: Keep all other columns alongside the cleaned 'Use', 'Name', and 'Code' columns
strawberry_clean <- strawberry_clean %>%
select(Program, Year, Period, `Geo Level`, State, `State ANSI`, `Ag District`, `Ag District Code`,
County, `County ANSI`, Fruit, Category, Item, Metric, Domain, `Domain Category`, Value, `CV (%)`,
Use, Name, Code)
# Step 4: Save the cleaned dataset to a new CSV file
write_csv(strawberry_clean, "strawberry_separated_clean.csv")
# Output to verify the cleaned data
print(strawberry_clean)
# Load required libraries
library(tidyverse)
# Step 1: Read the CSV file
strawberry <- read_csv("strawberry_separated.csv")
# Step 2: Clean and organize the 'Use', 'Name', and 'Code' columns, and remove 'Domain' and 'Domain Category'
strawberry_clean <- strawberry %>%
# Extract 'Use' from the 'Domain' column
mutate(
Use = case_when(
str_detect(`Domain`, "FUNGICIDE") ~ "FUNGICIDE",
str_detect(`Domain`, "INSECTICIDE") ~ "INSECTICIDE",
str_detect(`Domain`, "HERBICIDE") ~ "HERBICIDE",
TRUE ~ NA_character_
),
# Extract 'Name' from the 'Domain Category' column, removing the '= CODE' part
Name = str_extract(`Domain Category`, "\\((.*?)\\)"),
Name = str_replace_all(Name, " = \\d+", ""),  # Remove the '= CODE' part
Name = str_replace_all(Name, "[()]", ""),    # Remove parentheses around 'Name'
# Extract 'Code' from the 'Domain Category' column (after the '=' sign)
Code = str_extract(`Domain Category`, "\\d+"),  # Extract only the numeric part of the code
Code = str_trim(Code)  # Clean up any remaining whitespace
) %>%
# Remove rows where 'Use', 'Name', or 'Code' are NA
drop_na(Use, Name, Code) %>%
# Remove the unwanted 'Domain' and 'Domain Category' columns
select(-Domain, -`Domain Category`)
# Step 3: Save the cleaned dataset to a new CSV file
write_csv(strawberry_clean, "strawberry_separated_clean.csv")
# Output to verify the cleaned data
print(strawberry_clean)
knitr::opts_chunk$set(echo = TRUE)
#| label: load libraries
#| warning: false
#| message: false
library(knitr)
library(kableExtra)
library(tidyverse)
library(stringr)
#| label: read data - glimpse
strawberry <- read_csv("strawberries25_v3.csv", col_names = TRUE)
glimpse(strawberry)
## is every line associated with a state?
state_all <- strawberry |> distinct(State)
state_all1 <- strawberry |> group_by(State) |> count()
## every row is associated with a state
sum(state_all1$n) == dim(strawberry)[1]
## to get an idea of the data -- looking at california only
calif_census <- strawberry |> filter((State=="CALIFORNIA") & (Program=="CENSUS"))
calif_census <- calif_census |> select(Year, `Data Item`, Value)
###
calif_survey <- strawberry |> filter((State=="CALIFORNIA") & (Program=="SURVEY"))
calif_survey <- strawberry |> select(Year, Period, `Data Item`, Value)
#|label: drop 1-item columns
drop_one_value_col <- function(df){
drop <- NULL
for(i in 1:dim(df)[2]){
if((df |> distinct(df[,i]) |> count()) == 1){
drop = c(drop, i)
} }
if(is.null(drop)){return("none")}else{
print("Columns dropped:")
print(colnames(df)[drop])
strawberry <- df[, -1*drop]
}
}
## use the function
strawberry <- drop_one_value_col(strawberry)
drop_one_value_col(strawberry)
#|label: split Data Item
strawberry <- strawberry |>
separate_wider_delim(  cols = `Data Item`,
delim = ",",
names = c("Fruit",
"Category",
"Item",
"Metric"),
too_many = "error",
too_few = "align_start"
)
## Use too_many and too_few to set up the separation operation.
# Save the updated dataframe to a new CSV file
#|label: fix the leading space
# note
strawberry$Category[1]
# strawberry$Item[2]
# strawberry$Metric[6]
# strawberry$Domain[1]
##
## trim white space
strawberry$Category <- str_trim(strawberry$Category, side = "both")
strawberry$Item <- str_trim(strawberry$Item, side = "both")
strawberry$Metric <- str_trim(strawberry$Metric, side = "both")
write.csv(strawberry, file = "strawberry_separated.csv", row.names = FALSE)
#|label: fix the leading space
# note
strawberry$Category[1]
# strawberry$Item[2]
# strawberry$Metric[6]
# strawberry$Domain[1]
##
## trim white space
strawberry$Category <- str_trim(strawberry$Category, side = "both")
strawberry$Item <- str_trim(strawberry$Item, side = "both")
strawberry$Metric <- str_trim(strawberry$Metric, side = "both")
unique(strawberry$Fruit)
## generate a list of rows with the production and price information
spr <- which((strawberry$Fruit=="STRAWBERRIES - PRODUCTION") | (strawberry$Fruit=="STRAWBERRIES - PRICE RECEIVED"))
strw_prod_price <- strawberry |> slice(spr)
## this has the census data, too
strw_chem <- strawberry |> slice(-1*spr)
#|label: split srawberry into census and survey pieces
strw_b_sales <- strawberry |> filter(Program == "CENSUS")
strw_b_chem <- strawberry |> filter(Program == "SURVEY")
nrow(strawberry) == (nrow(strw_b_chem) + nrow(strw_b_sales))
## Move marketing-related rows in strw_b_chem
## to strw_b_sales
write.csv(strawberry, file = "strawberry_separated.csv", row.names = FALSE)
# Load required libraries
library(tidyverse)
# Step 1: Read the CSV file
strawberry <- read_csv("strawberry_separated.csv")
# Step 2: Clean and organize the 'Use', 'Name', and 'Code' columns, and remove 'Domain' and 'Domain Category'
strawberry_clean <- strawberry %>%
# Extract 'Use' from the 'Domain' column
mutate(
Use = case_when(
str_detect(`Domain`, "FUNGICIDE") ~ "FUNGICIDE",
str_detect(`Domain`, "INSECTICIDE") ~ "INSECTICIDE",
str_detect(`Domain`, "HERBICIDE") ~ "HERBICIDE",
TRUE ~ NA_character_
),
# Extract 'Name' from the 'Domain Category' column, removing the '= CODE' part
Name = str_extract(`Domain Category`, "\\((.*?)\\)"),
Name = str_replace_all(Name, " = \\d+", ""),  # Remove the '= CODE' part
Name = str_replace_all(Name, "[()]", ""),    # Remove parentheses around 'Name'
# Extract 'Code' from the 'Domain Category' column (after the '=' sign)
Code = str_extract(`Domain Category`, "\\d+"),  # Extract only the numeric part of the code
Code = str_trim(Code)  # Clean up any remaining whitespace
) %>%
# Remove rows where 'Use', 'Name', or 'Code' are NA
drop_na(Use, Name, Code) %>%
# Remove the unwanted 'Domain' and 'Domain Category' columns
select(-Domain, -`Domain Category`)
# Step 3: Save the cleaned dataset to a new CSV file
write_csv(strawberry_clean, "strawberry_separated_clean.csv")
# Output to verify the cleaned data
print(strawberry_clean)
# Display the first few rows of the cleaned data as a table
knitr::kable(head(strawberry_clean), format = "html") %>%
kableExtra::kable_styling(bootstrap_options = c("striped", "hover", "condensed"))
# Bar plot of chemical use types (FUNGICIDE, INSECTICIDE, etc.)
ggplot(strawberry_clean, aes(x = Use)) +
geom_bar(fill = "skyblue") +
labs(title = "Distribution of Chemical Uses", x = "Chemical Use", y = "Count") +
theme_minimal()
# Plot the number of chemical applications (grouped by 'Use') across different measurement types
ggplot(strawberry_clean, aes(x = Use, fill = Fruit)) +
geom_bar(position = "dodge") +
labs(title = "Chemical Applications by Type", x = "Chemical Use", y = "Count", fill = "Fruit") +
theme_minimal()
# Scatter plot of chemical codes over the years
ggplot(strawberry_clean, aes(x = Year, y = as.numeric(Code), color = Use)) +
geom_point() +
labs(title = "Chemical Code Distribution by Year", x = "Year", y = "Chemical Code", color = "Chemical Use") +
theme_minimal()
# Load the necessary libraries
library(tidyverse)
# Assuming 'strawberry_clean' is the cleaned dataset with 'Year', 'Code', and 'Use' columns
ggplot(strawberry_clean, aes(x = Year, y = as.numeric(Code), color = Use)) +
geom_point() +
labs(title = "Chemical Code Distribution by Year", x = "Year", y = "Chemical Code") +
scale_y_continuous(labels = scales::comma) +  # This will format the y-axis with commas instead of scientific notation
theme_minimal()
