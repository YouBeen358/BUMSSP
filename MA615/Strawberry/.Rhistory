Category = str_trim(Category, side = "both"),
Item = str_trim(Item, side = "both"),
Metric = str_trim(Metric, side = "both")
)
# Step 6: Save the cleaned organic strawberries data to a new CSV file
write_csv(organic_strawberry, "organic_strawberries_cleaned.csv")
# Step 7: Display a sample of the cleaned data for verification
print(head(organic_strawberry))
# Bar chart of organic strawberry production over the years
organic_strawberry %>%
filter(Item == "ORGANIC - PRODUCTION", Metric == "MEASURED IN CWT") %>%
ggplot(aes(x = Year, y = as.numeric(str_remove(Value, ",")))) +
geom_bar(stat = "identity", fill = "lightblue") +
labs(title = "Organic Strawberry Production Over Time",
x = "Year",
y = "Production (CWT)") +
theme_minimal()
# Bar chart of organic strawberry sales by type
organic_strawberry %>%
filter(Item == "ORGANIC - SALES", !is.na(Metric)) %>%
ggplot(aes(x = Metric, y = as.numeric(str_remove(Value, ",")), fill = Metric)) +
geom_bar(stat = "identity") +
labs(title = "Organic Strawberry Sales by Type",
x = "Sales Type",
y = "Sales Value") +
theme_minimal()
# Bar chart of operations with harvested area over the years
organic_strawberry %>%
filter(Item == "ORGANIC - OPERATIONS WITH AREA HARVESTED") %>%
ggplot(aes(x = Year, y = as.numeric(Value))) +
geom_bar(stat = "identity", fill = "green") +
labs(title = "Operations with Harvested Area Over Time",
x = "Year",
y = "Number of Operations") +
theme_minimal()
# Load the required libraries
library(tidyverse)
library(stringr)
# Step 1: Read the original strawberries dataset
strawberries_orig <- read_csv("strawberries25_v3.csv")
# Step 2: Filter for Organic Strawberries
organic_strawberry <- strawberries_orig %>%
filter(str_detect(`Data Item`, "ORGANIC"))
# Step 3: Remove columns with a single value in all rows
drop_one_value_col <- function(df){
drop <- NULL
for(i in 1:dim(df)[2]){
if((df |> distinct(df[,i]) |> count()) == 1){
drop = c(drop, i)
}
}
if(is.null(drop)){
return(df)  # Return the original dataframe if no columns are dropped
} else {
print("Columns dropped:")
print(colnames(df)[drop])
df <- df[, -drop]  # Remove columns with only a single value
return(df)
}
}
# Apply the function to drop columns with a single value
organic_strawberry <- drop_one_value_col(organic_strawberry)
# Step 4: Split composite columns (e.g., "Data Item")
organic_strawberry <- organic_strawberry %>%
separate_wider_delim(cols = `Data Item`,
delim = ",",
names = c("Fruit", "Category", "Item", "Metric"),
too_many = "error",
too_few = "align_start")
# Step 5: Clean up leading/trailing spaces in the new columns
organic_strawberry <- organic_strawberry %>%
mutate(
Category = str_trim(Category, side = "both"),
Item = str_trim(Item, side = "both"),
Metric = str_trim(Metric, side = "both")
)
# Clean the Value column by removing commas and converting to numeric
organic_strawberry <- organic_strawberry %>%
mutate(Value = as.numeric(str_remove_all(Value, ",")))
# Step 6: Save the cleaned organic strawberries data to a new CSV file
write_csv(organic_strawberry, "organic_strawberries_cleaned.csv")
# Step 7: Display a sample of the cleaned data for verification
print(head(organic_strawberry))
# Bar chart of organic strawberry production over the years
organic_strawberry %>%
filter(Item == "ORGANIC - PRODUCTION", Metric == "MEASURED IN CWT") %>%
ggplot(aes(x = Year, y = Value)) +
geom_bar(stat = "identity", fill = "lightblue") +
labs(title = "Organic Strawberry Production Over Time",
x = "Year",
y = "Production (CWT)") +
theme_minimal()
# Load the required libraries
library(tidyverse)
library(stringr)
# Step 1: Read the original strawberries dataset
strawberries_orig <- read_csv("strawberries25_v3.csv")
# Step 2: Filter for Organic Strawberries
organic_strawberry <- strawberries_orig %>%
filter(str_detect(`Data Item`, "ORGANIC"))
# Step 3: Remove columns with a single value in all rows
drop_one_value_col <- function(df){
drop <- NULL
for(i in 1:dim(df)[2]){
if((df |> distinct(df[,i]) |> count()) == 1){
drop = c(drop, i)
}
}
if(is.null(drop)){
return(df)  # Return the original dataframe if no columns are dropped
} else {
print("Columns dropped:")
print(colnames(df)[drop])
df <- df[, -drop]  # Remove columns with only a single value
return(df)
}
}
# Apply the function to drop columns with a single value
organic_strawberry <- drop_one_value_col(organic_strawberry)
# Step 4: Split composite columns (e.g., "Data Item")
organic_strawberry <- organic_strawberry %>%
separate_wider_delim(cols = `Data Item`,
delim = ",",
names = c("Fruit", "Category", "Item", "Metric"),
too_many = "error",
too_few = "align_start")
# Step 5: Clean up leading/trailing spaces in the new columns
organic_strawberry <- organic_strawberry %>%
mutate(
Category = str_trim(Category, side = "both"),
Item = str_trim(Item, side = "both"),
Metric = str_trim(Metric, side = "both")
)
# Clean the Value column by removing commas and converting to numeric
organic_strawberry <- organic_strawberry %>%
mutate(Value = as.numeric(str_remove_all(Value, ",")))
# Step 6: Save the cleaned organic strawberries data to a new CSV file
write_csv(organic_strawberry, "organic_strawberries_cleaned.csv")
# Step 7: Display a sample of the cleaned data for verification
print(head(organic_strawberry))
summary(organic_strawberry)
# Bar chart of organic strawberry production by state
organic_strawberry %>%
filter(Item == "ORGANIC - PRODUCTION", Metric == "MEASURED IN CWT") %>%
ggplot(aes(x = State, y = as.numeric(Value))) +
geom_bar(stat = "identity", fill = "lightblue") +
labs(title = "Organic Strawberry Production by State",
x = "State",
y = "Production (CWT)") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for clarity
# Bar chart of organic strawberry sales by state
organic_strawberry %>%
filter(Item == "ORGANIC - SALES", Metric == "MEASURED IN $") %>%
ggplot(aes(x = State, y = as.numeric(Value))) +
geom_bar(stat = "identity", fill = "green") +
labs(title = "Organic Strawberry Sales by State",
x = "State",
y = "Sales (USD)") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for clarity
# Step 1: Clean the Value column by removing commas and handling missing values
organic_strawberry_cleaned <- organic_strawberry %>%
mutate(
Value = as.numeric(str_remove_all(Value, ",")),  # Remove commas and convert to numeric
Value = ifelse(is.na(Value), 0, Value)  # Replace missing or suppressed data with 0
)
# Step 2: Filter for state-level data (removing national totals or NA states)
organic_strawberry_cleaned <- organic_strawberry_cleaned %>%
filter(Geo_Level == "STATE", !is.na(State))
# Step 1: Clean the Value column by removing commas and handling missing values
organic_strawberry_cleaned <- organic_strawberry %>%
mutate(
Value = as.numeric(str_remove_all(Value, ",")),  # Remove commas and convert to numeric
Value = ifelse(is.na(Value), 0, Value)  # Replace missing or suppressed data with 0
)
# Step 2: Filter for state-level data (removing national totals or NA states)
organic_strawberry_cleaned <- organic_strawberry_cleaned %>%
filter(Geo_Level == "STATE", !is.na(State))
# Load the required libraries
library(tidyverse)
library(stringr)
# Step 1: Read the original strawberries dataset
strawberries_orig <- read_csv("strawberries25_v3.csv")
# Step 2: Filter for Organic Strawberries
organic_strawberry <- strawberries_orig %>%
filter(str_detect(`Data Item`, "ORGANIC"))
# Step 3: Remove columns with a single value in all rows
drop_one_value_col <- function(df){
drop <- NULL
for(i in 1:dim(df)[2]){
if((df |> distinct(df[,i]) |> count()) == 1){
drop = c(drop, i)
}
}
if(is.null(drop)){
return(df)  # Return the original dataframe if no columns are dropped
} else {
print("Columns dropped:")
print(colnames(df)[drop])
df <- df[, -drop]  # Remove columns with only a single value
return(df)
}
}
# Apply the function to drop columns with a single value
organic_strawberry <- drop_one_value_col(organic_strawberry)
# Step 4: Split composite columns (e.g., "Data Item")
organic_strawberry <- organic_strawberry %>%
separate_wider_delim(cols = `Data Item`,
delim = ",",
names = c("Fruit", "Category", "Item", "Metric"),
too_many = "error",
too_few = "align_start")
# Step 5: Clean up leading/trailing spaces in the new columns
organic_strawberry <- organic_strawberry %>%
mutate(
Category = str_trim(Category, side = "both"),
Item = str_trim(Item, side = "both"),
Metric = str_trim(Metric, side = "both")
)
# Clean the Value column by removing commas and converting to numeric
organic_strawberry <- organic_strawberry %>%
mutate(Value = as.numeric(str_remove_all(Value, ",")))
# Step 6: Save the cleaned organic strawberries data to a new CSV file
write_csv(organic_strawberry, "organic_strawberries_cleaned.csv")
# Step 7: Display a sample of the cleaned data for verification
print(head(organic_strawberry))
summary(organic_strawberry)
# Step 1: Clean the Value column by removing commas and handling missing values
organic_strawberry_cleaned <- organic_strawberry %>%
mutate(
Value = as.numeric(str_remove_all(Value, ",")),  # Remove commas and convert to numeric
Value = ifelse(is.na(Value), 0, Value)  # Replace missing or suppressed data with 0
)
# Step 2: Filter for state-level data (removing national totals or NA states)
organic_strawberry_cleaned <- organic_strawberry_cleaned.csv %>%
filter(Geo_Level == "STATE", !is.na(State))
# Step 1: Clean the Value column by removing commas and handling missing values
organic_strawberry_cleaned <- organic_strawberry %>%
mutate(
Value = as.numeric(str_remove_all(Value, ",")),  # Remove commas and convert to numeric
Value = ifelse(is.na(Value), 0, Value)  # Replace missing or suppressed data with 0
)
# Step 2: Filter for state-level data (removing national totals or NA states)
organic_strawberry_cleaned <- organic_strawberries_cleaned.csv %>%
filter(Geo_Level == "STATE", !is.na(State))
# Load the required libraries
library(tidyverse)
library(stringr)
# Step 1: Read the original strawberries dataset
strawberries_orig <- read_csv("strawberries25_v3.csv")
# Step 2: Filter for Organic Strawberries
organic_strawberry <- strawberries_orig %>%
filter(str_detect(`Data Item`, "ORGANIC"))
# Step 3: Remove columns with a single value in all rows
drop_one_value_col <- function(df) {
drop <- NULL
for (i in 1:ncol(df)) {
if (n_distinct(df[[i]]) == 1) {
drop <- c(drop, i)
}
}
if (is.null(drop)) {
return(df)  # Return the original dataframe if no columns are dropped
} else {
print("Columns dropped:")
print(colnames(df)[drop])
df <- df[, -drop]  # Remove columns with only a single value
return(df)
}
}
# Apply the function to drop columns with a single value
organic_strawberry <- drop_one_value_col(organic_strawberry)
# Step 4: Split composite columns (e.g., "Data Item")
# Use a more flexible splitting approach to handle inconsistencies
organic_strawberry <- organic_strawberry %>%
separate(`Data Item`, into = c("Fruit", "Category", "Item", "Metric"), sep = ",", extra = "merge", fill = "right")
# Step 5: Clean up leading/trailing spaces in the new columns
organic_strawberry <- organic_strawberry %>%
mutate(across(c(Category, Item, Metric), ~ str_trim(., side = "both")))
# Step 6: Handle non-numeric values in the 'Value' column
# Convert non-numeric entries like (D), (H) to NA and remove commas
organic_strawberry <- organic_strawberry %>%
mutate(Value = as.numeric(str_replace_all(Value, "[^0-9]", NA_character_)))
# Step 7: Save the cleaned organic strawberries data to a new CSV file
write_csv(organic_strawberry, "organic_strawberries_cleaned.csv")
# Step 8: Display a sample of the cleaned data for verification
print(head(organic_strawberry))
# Optional: Check the summary to verify that the 'Value' column is numeric and other columns are correct
summary(organic_strawberry)
```{r}
# Load the required libraries
library(tidyverse)
library(stringr)
# Step 1: Read the original strawberries dataset
strawberries_orig <- read_csv("strawberries25_v3.csv")
# Step 2: Filter for Organic Strawberries
organic_strawberry <- strawberries_orig %>%
filter(str_detect(`Data Item`, "ORGANIC"))
# Step 3: Remove columns with a single value in all rows
drop_one_value_col <- function(df) {
drop <- NULL
for (i in 1:ncol(df)) {
if (n_distinct(df[[i]]) == 1) {
drop <- c(drop, i)
}
}
if (is.null(drop)) {
return(df)  # Return the original dataframe if no columns are dropped
} else {
print("Columns dropped:")
print(colnames(df)[drop])
df <- df[, -drop]  # Remove columns with only a single value
return(df)
}
}
# Apply the function to drop columns with a single value
organic_strawberry <- drop_one_value_col(organic_strawberry)
# Step 4: Split composite columns (e.g., "Data Item")
# Use a more flexible splitting approach to handle inconsistencies
organic_strawberry <- organic_strawberry %>%
separate(`Data Item`, into = c("Fruit", "Category", "Item", "Metric"), sep = ",", extra = "merge", fill = "right")
# Step 5: Clean up leading/trailing spaces in the new columns
organic_strawberry <- organic_strawberry %>%
mutate(across(c(Category, Item, Metric), ~ str_trim(., side = "both")))
# Step 6: Handle non-numeric values in the 'Value' column
# Convert non-numeric entries like (D), (H) to NA and remove commas
organic_strawberry <- organic_strawberry %>%
mutate(Value = as.numeric(str_replace_all(Value, "[^0-9]", NA_character_)))
# Step 7: Save the cleaned organic strawberries data to a new CSV file
write_csv(organic_strawberry, "organic_strawberries_cleaned.csv")
# Step 8: Display a sample of the cleaned data for verification
print(head(organic_strawberry))
# Optional: Check the summary to verify that the 'Value' column is numeric and other columns are correct
summary(organic_strawberry)
# Step 1: Clean the Value column by removing commas and handling missing values
organic_strawberry_cleaned <- organic_strawberry %>%
mutate(
Value = as.numeric(str_remove_all(Value, ",")),  # Remove commas and convert to numeric
Value = ifelse(is.na(Value), 0, Value)  # Replace missing or suppressed data with 0
)
# Step 2: Filter for state-level data (removing national totals or NA states)
organic_strawberry_cleaned <- organic_strawberry_cleaned %>%
filter(Geo_Level == "STATE", !is.na(State))
# Load required library
library(ggplot2)
# Step 1: Filter the data to make sure you focus on relevant rows (e.g., exclude rows with NA in Value)
organic_strawberry_state <- organic_strawberry %>%
filter(!is.na(Value), !is.na(State))  # Ensure Value and State are not NA
# Step 2: Plot the bar graph of Value by State
ggplot(organic_strawberry_state, aes(x = State, y = Value)) +
geom_bar(stat = "identity", fill = "lightblue") +
labs(title = "Organic Strawberry Values by State",
x = "State",
y = "Value") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for clarity
# Load necessary library
library(tidyverse)
# Step 1: Filter the dataset for Fresh Market and Processing data
market_processing <- organic_strawberry %>%
filter(str_detect(Item, "FRESH MARKET|PROCESSING"))
# Step 2: Summarize data by Year, Type (Fresh Market or Processing), and Metric
market_processing_summary <- market_processing %>%
group_by(Year, Item, Metric) %>%
summarise(Total_Value = sum(Value, na.rm = TRUE), .groups = 'drop')
# Step 3: Spread the data to make a clearer comparison between Fresh Market and Processing
market_processing_comparison <- market_processing_summary %>%
pivot_wider(names_from = Item, values_from = Total_Value, names_prefix = "Strategy_")
# Step 4: Visualize the comparison (e.g., bar chart for sales measured in dollars)
ggplot(market_processing_summary %>%
filter(Metric == "MEASURED IN $"),
aes(x = Year, y = Total_Value, fill = Item)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Comparison of Fresh Market and Processing Sales",
x = "Year",
y = "Total Sales (USD)",
fill = "Strategy") +
theme_minimal()
# Step 5: Optional - Display the summarized table for operations and sales comparison
print(market_processing_comparison)
# Load the required libraries
library(tidyverse)
# Step 1: Read the original strawberries dataset
strawberries_orig <- read_csv("strawberries25_v3.csv")
# Step 2: Filter for Organic Strawberries
organic_strawberry <- strawberries_orig %>%
filter(str_detect(`Data Item`, "ORGANIC"))
# Step 3: Save the filtered organic strawberries data to a new CSV file
write_csv(organic_strawberry, "organic_strawberries.csv")
# Optional: Print the first few rows to verify the data
print(head(organic_strawberry))
# Load the required libraries
library(tidyverse)
library(stringr)
# Step 1: Read the original strawberries dataset
strawberries_orig <- read_csv("strawberries25_v3.csv")
# Step 2: Filter for Organic Strawberries
organic_strawberry <- strawberries_orig %>%
filter(str_detect(`Data Item`, "ORGANIC"))
# Step 3: Remove columns with a single value in all rows
drop_one_value_col <- function(df) {
drop <- NULL
for (i in 1:ncol(df)) {
if (n_distinct(df[[i]]) == 1) {
drop <- c(drop, i)
}
}
if (is.null(drop)) {
return(df)  # Return the original dataframe if no columns are dropped
} else {
print("Columns dropped:")
print(colnames(df)[drop])
df <- df[, -drop]  # Remove columns with only a single value
return(df)
}
}
# Apply the function to drop columns with a single value
organic_strawberry <- drop_one_value_col(organic_strawberry)
# Step 4: Split composite columns (e.g., "Data Item")
# Use a more flexible splitting approach to handle inconsistencies
organic_strawberry <- organic_strawberry %>%
separate(`Data Item`, into = c("Fruit", "Category", "Item", "Metric"), sep = ",", extra = "merge", fill = "right")
# Step 5: Clean up leading/trailing spaces in the new columns
organic_strawberry <- organic_strawberry %>%
mutate(across(c(Category, Item, Metric), ~ str_trim(., side = "both")))
# Step 6: Handle non-numeric values in the 'Value' column
# Convert non-numeric entries like (D), (H) to NA and remove commas
organic_strawberry <- organic_strawberry %>%
mutate(Value = as.numeric(str_replace_all(Value, "[^0-9]", NA_character_)))
# Step 7: Save the cleaned organic strawberries data to a new CSV file
write_csv(organic_strawberry, "organic_strawberries_cleaned.csv")
# Step 8: Display a sample of the cleaned data for verification
print(head(organic_strawberry))
# Optional: Check the summary to verify that the 'Value' column is numeric and other columns are correct
summary(organic_strawberry)
# Load required library
library(ggplot2)
# Step 1: Filter the data to make sure you focus on relevant rows (e.g., exclude rows with NA in Value)
organic_strawberry_state <- organic_strawberry %>%
filter(!is.na(Value), !is.na(State))  # Ensure Value and State are not NA
# Step 2: Plot the bar graph of Value by State
ggplot(organic_strawberry_state, aes(x = State, y = Value)) +
geom_bar(stat = "identity", fill = "lightblue") +
labs(title = "Organic Strawberry Values by State",
x = "State",
y = "Value") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for clarity
# Load necessary library
library(tidyverse)
# Step 1: Filter the dataset for Fresh Market and Processing data
market_processing <- organic_strawberry %>%
filter(str_detect(Item, "FRESH MARKET|PROCESSING"))
# Step 2: Summarize data by Year, Type (Fresh Market or Processing), and Metric
market_processing_summary <- market_processing %>%
group_by(Year, Item, Metric) %>%
summarise(Total_Value = sum(Value, na.rm = TRUE), .groups = 'drop')
# Step 3: Spread the data to make a clearer comparison between Fresh Market and Processing
market_processing_comparison <- market_processing_summary %>%
pivot_wider(names_from = Item, values_from = Total_Value, names_prefix = "Strategy_")
# Step 4: Visualize the comparison (e.g., bar chart for sales measured in dollars)
ggplot(market_processing_summary %>%
filter(Metric == "MEASURED IN $"),
aes(x = Year, y = Total_Value, fill = Item)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Comparison of Fresh Market and Processing Sales",
x = "Year",
y = "Total Sales (USD)",
fill = "Strategy") +
theme_minimal()
# Step 5: Optional - Display the summarized table for operations and sales comparison
print(market_processing_comparison)
# Load the data
strawberry_data <- read.csv("strawberries25_v3.csv", stringsAsFactors = FALSE)
# Replace (D) and (L) with NA
strawberry_data$Value <- gsub("\\(D\\)", NA, strawberry_data$Value)
strawberry_data$Value <- gsub("\\(L\\)", NA, strawberry_data$Value)
# Convert the Value column to numeric (after replacing NAs)
strawberry_data$Value <- as.numeric(strawberry_data$Value)
# Split the 'Data Item' column into 'Crop', 'Measurement', and 'Type'
library(tidyr)
strawberry_data <- separate(strawberry_data,
col = Data.Item,
into = c("Crop", "Measurement", "Type"),
sep = " - ")
# Drop irrelevant columns (such as Zip Code, Ag District, etc.)
strawberry_cleaned <- strawberry_data %>%
select(Program, Year, Geo.Level, State, County, Region, Crop, Measurement, Type, Value)
# Save the cleaned dataset to a new file
write.csv(strawberry_cleaned, "strawberry_data_acres.csv", row.names = FALSE)
# Load the data
strawberry_data <- read.csv("strawberries25_v3.csv", stringsAsFactors = FALSE)
# Replace (D) and (L) with NA and any other potential non-numeric values
strawberry_data$Value <- gsub("\\(D\\)", NA, strawberry_data$Value)
strawberry_data$Value <- gsub("\\(L\\)", NA, strawberry_data$Value)
# Convert the Value column to numeric, ignoring any warnings
strawberry_data$Value <- as.numeric(strawberry_data$Value)
# Split the 'Data Item' column into 'Crop', 'Measurement', and 'Type'
library(tidyr)
# Split 'Data Item' into Crop, Measurement, and Type
strawberry_data <- separate(strawberry_data,
col = Data.Item,
into = c("Crop", "Measurement", "Type"),
sep = " - ",
extra = "merge",
fill = "right")
# Drop irrelevant columns (such as Zip Code, Ag District, etc.)
strawberry_cleaned <- strawberry_data %>%
select(Program, Year, Geo.Level, State, County, Region, Crop, Measurement, Type, Value)
# Save the cleaned dataset to a new file
write.csv(strawberry_cleaned, "strawberry_data_acres.csv", row.names = FALSE)
