# Summarize rainfall data
rainfall_summary <- rainfall_data %>%
summarise(
Total_Rainfall = sum(HPCP, na.rm = TRUE),
Average_Rainfall = mean(HPCP, na.rm = TRUE),
Max_Rainfall = max(HPCP, na.rm = TRUE)
)
# Check the summary
print(rainfall_summary)
# Summarize rainfall by year
rainfall_by_year <- rainfall_data %>%
group_by(year = format(DATE, "%Y")) %>%
summarise(Total_Rainfall = sum(HPCP, na.rm = TRUE))
# View the yearly rainfall summary
print(rainfall_by_year)
knitr::opts_chunk$set(echo = TRUE)
# Load necessary libraries
library(dplyr)
# Load the rainfall dataset
rainfall_data <- read.csv("Rainfall.csv")
# Convert the DATE to proper date format
rainfall_data$DATE <- as.Date(rainfall_data$DATE, format = "%Y-%m-%d")
# Summarize rainfall data
rainfall_summary <- rainfall_data %>%
summarise(
Total_Rainfall = sum(HPCP, na.rm = TRUE),
Average_Rainfall = mean(HPCP, na.rm = TRUE),
Max_Rainfall = max(HPCP, na.rm = TRUE)
)
# Check the summary
print(rainfall_summary)
# Summarize rainfall by year
rainfall_by_year <- rainfall_data %>%
group_by(year = format(DATE, "%Y")) %>%
summarise(Total_Rainfall = sum(HPCP, na.rm = TRUE))
# View the yearly rainfall summary
print(rainfall_by_year)
# Load necessary libraries
library(dplyr)
# Load the rainfall dataset
rainfall_data <- read.csv("Rainfall.csv")
# Check the structure of the dataset to verify column names
str(rainfall_data)
# Ensure the DATE column exists and is in proper format
# If DATE is in a different format, adjust the format string accordingly
rainfall_data$DATE <- as.Date(rainfall_data$DATE, format = "%Y-%m-%d")
# Summarize rainfall data: Total, Average, and Maximum Rainfall
rainfall_summary <- rainfall_data %>%
summarise(
Total_Rainfall = sum(HPCP, na.rm = TRUE),   # Sum of rainfall
Average_Rainfall = mean(HPCP, na.rm = TRUE), # Average rainfall
Max_Rainfall = max(HPCP, na.rm = TRUE)      # Maximum rainfall
)
# Print the rainfall summary
print(rainfall_summary)
# Add a 'year' column to the dataset
rainfall_data <- rainfall_data %>%
mutate(year = format(DATE, "%Y"))
# Summarize rainfall by year
rainfall_by_year <- rainfall_data %>%
group_by(year) %>%
summarise(Total_Rainfall = sum(HPCP, na.rm = TRUE))
# Print the yearly rainfall summary
print(rainfall_by_year)
library(ggplot2)
# Plot total rainfall over time
ggplot(rainfall_by_year, aes(x = as.numeric(year), y = Total_Rainfall)) +
geom_line() +
labs(title = "Total Rainfall in Boston (1985-2013)", x = "Year", y = "Total Rainfall (mm)") +
theme_minimal()
# Boxplot of rainfall distribution
ggplot(rainfall_data, aes(x = factor(format(DATE, "%Y")), y = HPCP)) +
geom_boxplot() +
labs(title = "Yearly Rainfall Distribution in Boston", x = "Year", y = "Rainfall (mm)") +
theme_minimal()
# Density plot to check rainfall distribution
ggplot(rainfall_data, aes(x = HPCP)) +
geom_density(fill = "blue", alpha = 0.5) +
labs(title = "Distribution of Daily Rainfall", x = "Rainfall (mm)") +
theme_minimal()
# Load necessary libraries
library(dplyr)
library(ggplot2)
# Summarize rainfall by year and remove missing values
rainfall_by_year <- rainfall_data %>%
group_by(year = format(DATE, "%Y")) %>%
summarise(Total_Rainfall = sum(HPCP, na.rm = TRUE)) %>%
filter(!is.na(Total_Rainfall))
# Check the summary of yearly rainfall to see if values are very small
print(summary(rainfall_by_year))
# Plot total rainfall over time
ggplot(rainfall_by_year, aes(x = as.numeric(year), y = Total_Rainfall)) +
geom_line(color = "blue") +
geom_point() + # Adding points to emphasize individual values
labs(title = "Total Rainfall in Boston (1985-2013)", x = "Year", y = "Total Rainfall (mm)") +
theme_minimal()
# Boxplot of yearly rainfall distribution
ggplot(rainfall_data, aes(x = factor(format(DATE, "%Y")), y = HPCP)) +
geom_boxplot() +
labs(title = "Yearly Rainfall Distribution in Boston", x = "Year", y = "Rainfall (mm)") +
theme_minimal()
# Density plot to check rainfall distribution
ggplot(rainfall_data, aes(x = HPCP)) +
geom_density(fill = "blue", alpha = 0.5) +
labs(title = "Distribution of Daily Rainfall", x = "Rainfall (mm)") +
theme_minimal()
# Check for duplicate rows
duplicates <- rainfall_data %>% filter(duplicated(rainfall_data))
print(paste("Number of duplicate rows:", nrow(duplicates)))
# Inspect a sample of the rainfall data
print(head(rainfall_data))
# Group data by year and inspect the total rainfall values for each year
rainfall_by_year <- rainfall_data %>%
group_by(year = format(DATE, "%Y")) %>%
summarise(Total_Rainfall = sum(HPCP, na.rm = TRUE))
# Print the yearly rainfall data to inspect the distribution
print(rainfall_by_year)
# If all years have the same value, there might be an issue with the original data
# Load necessary libraries
library(dplyr)
library(ggplot2)
# Summarize rainfall by year and remove missing values
rainfall_by_year <- rainfall_data %>%
group_by(year = format(DATE, "%Y")) %>%
summarise(Total_Rainfall = sum(HPCP, na.rm = TRUE)) %>%
filter(!is.na(Total_Rainfall))
# Check the summary of yearly rainfall to see if values are very small
print(summary(rainfall_by_year))
# Boxplot of yearly rainfall distribution
ggplot(rainfall_data, aes(x = factor(format(DATE, "%Y")), y = HPCP)) +
geom_boxplot() +
labs(title = "Yearly Rainfall Distribution in Boston", x = "Year", y = "Rainfall (mm)") +
theme_minimal()
# Density plot to check rainfall distribution
ggplot(rainfall_data, aes(x = HPCP)) +
geom_density(fill = "blue", alpha = 0.5) +
labs(title = "Distribution of Daily Rainfall", x = "Rainfall (mm)") +
theme_minimal()
# Load necessary libraries
library(dplyr)
library(ggplot2)
# Load the dataset (make sure to replace with your actual file path)
rainfall_data <- read.csv("Rainfall.csv")
# Convert DATE to proper datetime format (assuming format is YYYYMMDD HH:MM)
rainfall_data$DATE <- as.POSIXct(rainfall_data$DATE, format = "%Y%m%d %H:%M")
# Summarize the dataset to check for missing or incorrect values
summary(rainfall_data)
# Check for negative or unusually large values in the rainfall data (HPCP)
rainfall_data <- rainfall_data %>%
filter(HPCP >= 0 & HPCP <= 500)  # Assuming rainfall should be between 0 and 500 mm
# Aggregate total rainfall by day, month, and year for analysis
rainfall_data_daily <- rainfall_data %>%
group_by(Day = as.Date(DATE)) %>%
summarise(Daily_Rainfall = sum(HPCP, na.rm = TRUE))
rainfall_data_monthly <- rainfall_data %>%
group_by(Month = format(DATE, "%Y-%m")) %>%
summarise(Monthly_Rainfall = sum(HPCP, na.rm = TRUE))
rainfall_data_yearly <- rainfall_data %>%
group_by(Year = format(DATE, "%Y")) %>%
summarise(Yearly_Rainfall = sum(HPCP, na.rm = TRUE))
# View the summarized data
print(head(rainfall_data_daily))
print(head(rainfall_data_monthly))
print(head(rainfall_data_yearly))
# Plot rainfall patterns over time
# Daily Rainfall
ggplot(rainfall_data_daily, aes(x = Day, y = Daily_Rainfall)) +
geom_line(color = "blue") +
labs(title = "Daily Rainfall in Boston", x = "Date", y = "Rainfall (mm)") +
theme_minimal()
# Monthly Rainfall
ggplot(rainfall_data_monthly, aes(x = as.Date(Month), y = Monthly_Rainfall)) +
geom_line(color = "green") +
labs(title = "Monthly Rainfall in Boston", x = "Month", y = "Rainfall (mm)") +
theme_minimal()
# Load necessary libraries
library(dplyr)
library(ggplot2)
# Load the dataset (make sure to replace with your actual file path)
rainfall_data <- read.csv("Rainfall.csv")
# Convert DATE to proper datetime format (assuming format is YYYYMMDD HH:MM)
rainfall_data$DATE <- as.POSIXct(rainfall_data$DATE, format = "%Y%m%d %H:%M")
# Summarize the dataset to check for missing or incorrect values
summary(rainfall_data)
# Check for negative or unusually large values in the rainfall data (HPCP)
rainfall_data <- rainfall_data %>%
filter(HPCP >= 0 & HPCP <= 500)  # Assuming rainfall should be between 0 and 500 mm
# Aggregate total rainfall by day, month, and year for analysis
rainfall_data_daily <- rainfall_data %>%
group_by(Day = as.Date(DATE)) %>%
summarise(Daily_Rainfall = sum(HPCP, na.rm = TRUE))
rainfall_data_monthly <- rainfall_data %>%
group_by(Month = format(DATE, "%Y-%m")) %>%
summarise(Monthly_Rainfall = sum(HPCP, na.rm = TRUE))
# Fix the Month format for ggplot (convert to date format with first day of the month)
rainfall_data_monthly$Month <- as.Date(paste0(rainfall_data_monthly$Month, "-01"), format = "%Y-%m-%d")
rainfall_data_yearly <- rainfall_data %>%
group_by(Year = format(DATE, "%Y")) %>%
summarise(Yearly_Rainfall = sum(HPCP, na.rm = TRUE))
# View the summarized data
print(head(rainfall_data_daily))
print(head(rainfall_data_monthly))
print(head(rainfall_data_yearly))
# Plot rainfall patterns over time
# Daily Rainfall
ggplot(rainfall_data_daily, aes(x = Day, y = Daily_Rainfall)) +
geom_line(color = "blue") +
labs(title = "Daily Rainfall in Boston", x = "Date", y = "Rainfall (mm)") +
theme_minimal()
# Monthly Rainfall (now with proper Date format)
ggplot(rainfall_data_monthly, aes(x = Month, y = Monthly_Rainfall)) +
geom_line(color = "green") +
labs(title = "Monthly Rainfall in Boston", x = "Month", y = "Rainfall (mm)") +
theme_minimal()
# Yearly Rainfall
ggplot(rainfall_data_yearly, aes(x = as.numeric(Year), y = Yearly_Rainfall)) +
geom_line(color = "red") +
labs(title = "Yearly Rainfall in Boston (1985-2013)", x = "Year", y = "Rainfall (mm)") +
theme_minimal()
# Load necessary libraries
library(dplyr)
# Load the rainfall dataset
rainfall_data <- read.csv("Rainfall.csv")
# Check the structure of the dataset to verify column names
str(rainfall_data)
# Ensure the DATE column exists and is in proper format
# If DATE is in a different format, adjust the format string accordingly
rainfall_data$DATE <- as.Date(rainfall_data$DATE, format = "%Y-%m-%d")
# Summarize rainfall data: Total, Average, and Maximum Rainfall
rainfall_summary <- rainfall_data %>%
summarise(
Total_Rainfall = sum(HPCP, na.rm = TRUE),   # Sum of rainfall
Average_Rainfall = mean(HPCP, na.rm = TRUE), # Average rainfall
Max_Rainfall = max(HPCP, na.rm = TRUE)      # Maximum rainfall
)
# Print the rainfall summary
print(rainfall_summary)
# Step 1: Filter necessary columns and remove missing values
model_data <- combined_data[, .(Rainfall = HPCP, Barometric_Pressure = BAR, Wind_Speed = WSPD, Atmospheric_Temperature = ATMP)]
# Step 1: Filter necessary columns and remove missing values
colnames(combined_data)
model_data <- combined_data[, .(Rainfall = HPCP, Barometric_Pressure = BAR, Wind_Speed = WSPD, Atmospheric_Temperature = ATMP)]
# Step 1: Filter necessary columns and remove missing values
model_data <- combined_data[, .(Rainfall = mm, Barometric_Pressure = BAR, Wind_Speed = WSPD, Atmospheric_Temperature = ATMP)]
model_data <- model_data[!is.na(Rainfall) & !is.na(Barometric_Pressure) & !is.na(Wind_Speed) & !is.na(Atmospheric_Temperature)]
# Step 2: Splitting the data into training and test sets
set.seed(123)  # For reproducibility
sample <- sample(1:nrow(model_data), 0.8 * nrow(model_data))
train_data <- model_data[sample, ]
test_data <- model_data[-sample, ]
# Step 3: Build the linear regression model
rainfall_model <- lm(Rainfall ~ Barometric_Pressure + Wind_Speed + Atmospheric_Temperature, data = train_data)
# Step 4: Summary of the model
summary(rainfall_model)
# Step 5: Predict on test data and evaluate the model
predictions <- predict(rainfall_model, newdata = test_data)
# Calculate MAE and RMSE
mae <- mean(abs(predictions - test_data$Rainfall))
rmse <- sqrt(mean((predictions - test_data$Rainfall)^2))
cat("Mean Absolute Error (MAE):", mae, "\n")
cat("Root Mean Square Error (RMSE):", rmse, "\n")
# Step 1: Filter necessary columns and remove missing values
model_data <- combined_data[, .(Rainfall = mm, Barometric_Pressure = BAR, Wind_Speed = WSPD, Atmospheric_Temperature = ATMP)]
model_data <- model_data[!is.na(Rainfall) & !is.na(Barometric_Pressure) & !is.na(Wind_Speed) & !is.na(Atmospheric_Temperature)]
# Step 2: Splitting the data into training and test sets
set.seed(123)  # For reproducibility
sample <- sample(1:nrow(model_data), 0.8 * nrow(model_data))
train_data <- model_data[sample, ]
test_data <- model_data[-sample, ]
# Step 3: Build the linear regression model
rainfall_model <- lm(Rainfall ~ Barometric_Pressure + Wind_Speed + Atmospheric_Temperature, data = train_data)
# Step 4: Summary of the model
summary(rainfall_model)
# Step 5: Predict on test data and evaluate the model
predictions <- predict(rainfall_model, newdata = test_data)
# Calculate MAE and RMSE
mae <- mean(abs(predictions - test_data$Rainfall))
rmse <- sqrt(mean((predictions - test_data$Rainfall)^2))
cat("Mean Absolute Error (MAE):", mae, "\n")
cat("Root Mean Square Error (RMSE):", rmse, "\n")
summary(model_data$Rainfall)
# Load rainfall data
rainfall_data <- read.csv("Rainfall.csv")
# Load the weather variables data (assuming this is already loaded as 'weather_data')
weather_data <- fread("buoy_44013_data_1985_2023.csv")
# Load rainfall data
rainfall_data <- read.csv("Rainfall.csv")
# Load the weather variables data (assuming this is already loaded as 'weather_data')
combined_data <- fread("buoy_44013_data_1985_2023.csv")
# Load rainfall data
rainfall_data <- read.csv("Rainfall.csv")
# Load the weather variables data (assuming this is already loaded as 'weather_data')
combined_data <- read.csv("buoy_44013_data_1985_2023.csv")
# Convert the DATE column in rainfall_data to a proper Date format (adjust if necessary)
rainfall_data$DATE <- as.Date(rainfall_data$DATE, format = "%Y-%m-%d")
# Convert the Date column in weather_data to Date format if it's not already in Date type
weather_data$Date <- as.Date(weather_data$Date)
# Load rainfall data
rainfall_data <- read.csv("Rainfall.csv")
# Load the weather variables data (assuming this is already loaded as 'weather_data')
weather_data <- read.csv("buoy_44013_data_1985_2023.csv")
# Convert the DATE column in rainfall_data to a proper Date format (adjust if necessary)
rainfall_data$DATE <- as.Date(rainfall_data$DATE, format = "%Y-%m-%d")
# Convert the Date column in weather_data to Date format if it's not already in Date type
weather_data$Date <- as.Date(weather_data$Date)
# Merge the two datasets based on the Date column
combined_data <- merge(rainfall_data, weather_data, by.x = "DATE", by.y = "Date", all = TRUE)
# Load rainfall data
rainfall_data <- fread("/mnt/data/Rainfall.csv")
library(data.table)
# Load rainfall data
rainfall_data <- read.csv("Rainfall.csv")
# Load the weather variables data (assuming this is already loaded as 'weather_data')
weather_data <- read.csv("buoy_44013_data_1985_2023.csv")
# Load rainfall data
rainfall_data <- fread("/mnt/data/Rainfall.csv")
library(data.table)
# Load rainfall data
rainfall_data <- fread("Rainfall.csv")
# Load weather data
weather_data <- fread("buoy_44013_data_1985_2023.csv")
# Convert the DATE column in rainfall_data to a proper Date format (adjust if necessary)
rainfall_data$DATE <- as.Date(rainfall_data$DATE, format = "%Y-%m-%d")
# Convert the Date column in weather_data to Date format if it's not already in Date type
weather_data$Date <- as.Date(weather_data$Date)
# Merge the two datasets based on the Date column
combined_data <- merge(rainfall_data, weather_data, by.x = "DATE", by.y = "Date", all = TRUE)
library(data.table)
# Load rainfall data
rainfall_data <- fread("Rainfall.csv")
# Load weather data
weather_data <- fread("buoy_44013_data_1985_2023.csv")
# Convert the DATE column in rainfall data to proper date format
rainfall_data$DATE <- as.Date(rainfall_data$DATE, format = "%Y%m%d")
# Ensure the Date column in weather data is in date format
weather_data$Date <- as.Date(weather_data$Date)
# Aggregating buoy data by Date
daily_weather <- weather_data[, .(
Avg_Barometric_Pressure = mean(BAR, na.rm = TRUE),
Avg_Wind_Speed = mean(WSPD, na.rm = TRUE),
Avg_Atmospheric_Temperature = mean(ATMP, na.rm = TRUE)
), by = .(Date)]
library(data.table)
# Load rainfall data
rainfall_data <- fread("Rainfall.csv")
# Load weather data
weather_data <- fread("buoy_44013_data_1985_2023.csv")
# Convert the DATE column in rainfall data to proper date format
rainfall_data$DATE <- as.Date(rainfall_data$DATE, format = "%Y%m%d")
# Ensure the Date column in weather data is in date format
weather_data$Date <- as.Date(weather_data$Date)
# Aggregating buoy data by Date
daily_weather <- weather_data[, .(
Avg_Barometric_Pressure = mean(BAR, na.rm = TRUE),
Avg_Wind_Speed = mean(WSPD, na.rm = TRUE),
Avg_Atmospheric_Temperature = mean(ATMP, na.rm = TRUE)
), by = .(Date)]
# Merge the rainfall data with the weather data by the DATE column
merged_data <- merge(rainfall_data, daily_weather, by.x = "DATE", by.y = "Date", all.x = TRUE)
# Check the merged data
head(merged_data)
library(data.table)
# Load rainfall data
rainfall_data <- fread("Rainfall.csv")
# Load weather data
weather_data <- fread("buoy_44013_data_1985_2023.csv")
# Convert the DATE column in rainfall data to proper date format
rainfall_data$DATE <- as.Date(rainfall_data$DATE, format = "%Y%m%d")
# Ensure the Date column in weather data is in date format
weather_data$Date <- as.Date(weather_data$Date)
# Aggregating buoy data by Date
daily_weather <- weather_data[, .(
Avg_Barometric_Pressure = mean(BAR, na.rm = TRUE),
Avg_Wind_Speed = mean(WSPD, na.rm = TRUE),
Avg_Atmospheric_Temperature = mean(ATMP, na.rm = TRUE)
), by = .(Date)]
# Merge the rainfall data with the weather data by the DATE column
merged_data <- merge(rainfall_data, daily_weather, by.x = "DATE", by.y = "Date", all.x = TRUE)
# Check the merged data
head(merged_data)
# Build a linear model to predict rainfall based on weather conditions
model <- lm(HPCP ~ Avg_Barometric_Pressure + Avg_Wind_Speed + Avg_Atmospheric_Temperature, data = merged_data)
# Summary of the model
summary(model)
library(data.table)
# Load rainfall data
rainfall_data <- fread("Rainfall.csv")
# Load weather data
weather_data <- fread("buoy_44013_data_1985_2023.csv")
# Convert the DATE column in rainfall data to proper date format
rainfall_data$DATE <- as.Date(rainfall_data$DATE, format = "%Y%m%d")
# Ensure the Date column in weather data is in date format
weather_data$Date <- as.Date(weather_data$Date)
# Aggregating buoy data by Date
daily_weather <- weather_data[, .(
Avg_Barometric_Pressure = mean(BAR, na.rm = TRUE),
Avg_Wind_Speed = mean(WSPD, na.rm = TRUE),
Avg_Atmospheric_Temperature = mean(ATMP, na.rm = TRUE)
), by = .(Date)]
# Merge the rainfall data with the weather data by the DATE column
merged_data <- merge(rainfall_data, daily_weather, by.x = "DATE", by.y = "Date", all.x = TRUE)
# Check the merged data
head(merged_data)
# Build a linear model to predict rainfall based on weather conditions
model <- lm(HPCP ~ Avg_Barometric_Pressure + Avg_Wind_Speed + Avg_Atmospheric_Temperature, data = merged_data)
# Summary of the model
summary(model)
# Make predictions (if needed)
predictions <- predict(model, newdata = merged_data)
# Evaluate model performance
library(Metrics)
install.packages("Metrics")
library(data.table)
# Load rainfall data
rainfall_data <- fread("Rainfall.csv")
# Load weather data
weather_data <- fread("buoy_44013_data_1985_2023.csv")
# Convert the DATE column in rainfall data to proper date format
rainfall_data$DATE <- as.Date(rainfall_data$DATE, format = "%Y%m%d")
# Ensure the Date column in weather data is in date format
weather_data$Date <- as.Date(weather_data$Date)
# Aggregating buoy data by Date
daily_weather <- weather_data[, .(
Avg_Barometric_Pressure = mean(BAR, na.rm = TRUE),
Avg_Wind_Speed = mean(WSPD, na.rm = TRUE),
Avg_Atmospheric_Temperature = mean(ATMP, na.rm = TRUE)
), by = .(Date)]
# Merge the rainfall data with the weather data by the DATE column
merged_data <- merge(rainfall_data, daily_weather, by.x = "DATE", by.y = "Date", all.x = TRUE)
# Check the merged data
head(merged_data)
# Build a linear model to predict rainfall based on weather conditions
model <- lm(HPCP ~ Avg_Barometric_Pressure + Avg_Wind_Speed + Avg_Atmospheric_Temperature, data = merged_data)
# Summary of the model
summary(model)
# Make predictions (if needed)
predictions <- predict(model, newdata = merged_data)
# Evaluate model performance
library(Metrics)
mae_value <- mae(merged_data$HPCP, predictions)
rmse_value <- rmse(merged_data$HPCP, predictions)
cat("Mean Absolute Error (MAE):", mae_value, "\n")
cat("Root Mean Square Error (RMSE):", rmse_value, "\n")
# Ensure weather_data and rainfall_data are correctly loaded
# Merge the two datasets by Date if the date columns match in both datasets
weather_data$Date <- as.Date(weather_data$Date)  # Convert to Date if necessary
rainfall_data$DATE <- as.Date(rainfall_data$DATE, format = "%Y-%m-%d")
# Merge the data
merged_data <- merge(weather_data, rainfall_data, by.x = "Date", by.y = "DATE")
# Simple regression model using weather variables to predict Rainfall
model <- lm(HPCP ~ BAR + WSPD + ATMP, data = merged_data)
# Summary of the model
summary(model)
# Predict rainfall using the model
merged_data$predicted_rainfall <- predict(model, newdata = merged_data)
# Plot actual vs predicted rainfall
library(ggplot2)
ggplot(merged_data, aes(x = predicted_rainfall, y = HPCP)) +
geom_point(color = "blue", alpha = 0.5) +
geom_abline(slope = 1, intercept = 0, color = "red", linetype = "dashed") +  # Line y=x
labs(title = "Actual vs Predicted Rainfall", x = "Predicted Rainfall (mm)", y = "Actual Rainfall (mm)") +
theme_minimal()
library(data.table)
# Load rainfall data
rainfall_data <- fread("Rainfall.csv")
# Load weather data
weather_data <- fread("buoy_44013_data_1985_2023.csv")
# Convert the DATE column in rainfall data to proper date format
rainfall_data$DATE <- as.Date(rainfall_data$DATE, format = "%Y%m%d")
# Ensure the Date column in weather data is in date format
weather_data$Date <- as.Date(weather_data$Date)
# Aggregating buoy data by Date
daily_weather <- weather_data[, .(
Avg_Barometric_Pressure = mean(BAR, na.rm = TRUE),
Avg_Wind_Speed = mean(WSPD, na.rm = TRUE),
Avg_Atmospheric_Temperature = mean(ATMP, na.rm = TRUE)
), by = .(Date)]
# Merge the rainfall data with the weather data by the DATE column
merged_data <- merge(rainfall_data, daily_weather, by.x = "DATE", by.y = "Date", all.x = TRUE)
# Check the merged data
head(merged_data)
# Build a linear model to predict rainfall based on weather conditions
model <- lm(HPCP ~ Avg_Barometric_Pressure + Avg_Wind_Speed + Avg_Atmospheric_Temperature, data = merged_data)
# Summary of the model
summary(model)
# Make predictions (if needed)
predictions <- predict(model, newdata = merged_data)
# Evaluate model performance
library(Metrics)
mae_value <- mae(merged_data$HPCP, predictions)
rmse_value <- rmse(merged_data$HPCP, predictions)
cat("Mean Absolute Error (MAE):", mae_value, "\n")
cat("Root Mean Square Error (RMSE):", rmse_value, "\n")
# Ensure weather_data and rainfall_data are correctly loaded
# Merge the two datasets by Date if the date columns match in both datasets
weather_data$Date <- as.Date(weather_data$Date)  # Convert to Date if necessary
rainfall_data$DATE <- as.Date(rainfall_data$DATE, format = "%Y-%m-%d")
# Merge the data
merged_data <- merge(weather_data, rainfall_data, by.x = "Date", by.y = "DATE")
# Simple regression model using weather variables to predict Rainfall
model <- lm(HPCP ~ BAR + WSPD + ATMP, data = merged_data)
# Summary of the model
summary(model)
# Predict rainfall using the model
merged_data$predicted_rainfall <- predict(model, newdata = merged_data)
# Plot actual vs predicted rainfall
library(ggplot2)
ggplot(merged_data, aes(x = predicted_rainfall, y = HPCP)) +
geom_point(color = "blue", alpha = 0.5) +
geom_abline(slope = 1, intercept = 0, color = "red", linetype = "dashed") +  # Line y=x
labs(title = "Actual vs Predicted Rainfall", x = "Predicted Rainfall (mm)", y = "Actual Rainfall (mm)") +
theme_minimal()
